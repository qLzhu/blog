<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>commit时忘记设置全局用户名及其邮箱</title>
    <url>/blog/58535/</url>
    <content><![CDATA[<p>由于电脑更新，期间重新装过 Git 所以造成了全局下的用户名及其邮箱丢失，在 commit 时才知道，这时我们可通过下述命令对上次的 commit 附注进行设置，在命令的后方加 –no-edit 参数不会打开编辑器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&quot;Author Name &lt;email@address.com&gt;&quot;</span> --no-edit</span><br></pre></td></tr></table></figure>

<p>全局设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name [<span class="string">&quot;Author Name&quot;</span>]</span><br><span class="line">git config --global user.email [<span class="string">&quot;email@address.com&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git commit</tag>
        <tag>git commit --amend --author</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH连接远程仓库无权限问题</title>
    <url>/blog/53774/</url>
    <content><![CDATA[<p>在连接 blog 在 Github 上的远程仓库时，终端提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added the RSA host key <span class="keyword">for</span> IP address <span class="string">&#x27;**.205.**3.1*6&#x27;</span> to the list of known hosts.</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line">fatal: 无法读取远程仓库。</span><br></pre></td></tr></table></figure>

<p>随后通过 ssh 命令检测了下是否能够正常连接 Github，发现同样是没有权限。</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<p>那么这时肯定是密钥出现问题了!<br>通过 ls 命令才发现本地的 id_rsa 和 id_rsa.pub 没了，原因是之前我做过电脑更新！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br><span class="line">drwx------   5 qinlzhu  staff   160 10  2 15:39 .</span><br><span class="line">drwxr-xr-x+ 41 qinlzhu  staff  1312 10  2 15:57 ..</span><br><span class="line">-rw-r--r--   1 qinlzhu  staff  2646 10  2 15:42 known_hosts</span><br></pre></td></tr></table></figure>

<p>找到原因就好解决了，我们只需要通过 ssh-keygen 命令重新生成密钥，并把公钥部署到 GitHub 上即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C [<span class="string">&quot;email@example.com&quot;</span>]</span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>知识拓展：</p>
<ul>
<li><a href="https://qlzhu.github.io/blog/39939/">git 基础知识</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">与 SSH 连接</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys">检查现有 SSH 密钥</a></li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Permission denied</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBook Basic</title>
    <url>/blog/19654/</url>
    <content><![CDATA[<p><a href="https://github.com/GitbookIO/gitbook">GitBook</a>是一个使用GIT、Github和Markdown语法来构建书籍的工具，并且能够将你构建出来的书籍输出为pdf、epub、mobi等格式。它可以让程序猿像编代码一样编辑自己的书籍或者笔记，并且托管服务是完全免费的跟Github一样</p>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>GitBook依赖Node环境，所以需要先安装Node再全局安装GitBook，Node安装请查阅<a href="/blog/21969/" title="Mac 卸载 App 残留、Node 和 NPM">Mac 卸载 App 残留、Node 和 NPM</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g gitbook-cli</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><p>创建本地书籍目录并使用GitBook初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gitbook-example &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span> &amp;&amp; gitbook init</span><br></pre></td></tr></table></figure>

<p>初始化完成后，GitBook会在该目录下创建两个文件README.md和SUMMARY.md</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tree ./</span><br><span class="line"></span><br><span class="line">./</span><br><span class="line">├── README.md  <span class="comment">#书籍的序或者前言</span></span><br><span class="line">└── SUMMARY.md <span class="comment">#目录，GitBook会按照这个文件来生成书籍的结构，目录深度只支持两级</span></span><br></pre></td></tr></table></figure>

<p>编辑SUMMARY.md书籍目录，就跟我们平时在MD文件里添加链接是一样的。方括号 [] 内的是章节名称，小括号 () 内的则是章节路径。例如：</p>
<figure class="highlight markdown"><figcaption><span>./SUMMARY.md</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section"># 目录</span></span><br><span class="line"><span class="section"># 这里的标题并不会显示，注释作用</span></span><br><span class="line"><span class="section"># 下方的 --- 会呈现一个分隔线</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string">概要</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">第一章 什么是Ajax</span>](<span class="link">lesson01/what.md</span>)</span><br><span class="line"><span class="bullet">    +</span> [<span class="string">1.1 诠释Ajax</span>](<span class="link">lesson01/1.1.md</span>)</span><br><span class="line"><span class="bullet">        *</span> [<span class="string">1.1.1 关键之处</span>](<span class="link">lesson01/1.1.1.md</span>)</span><br><span class="line"><span class="bullet">        *</span> [<span class="string">1.1.2 种种选择</span>](<span class="link">lesson01/1.1.1.md</span>)</span><br><span class="line"><span class="bullet">    +</span> [<span class="string">1.2 Ajax工具包</span>](<span class="link">lesson01/1.2.md</span>)</span><br><span class="line"><span class="section">    + [<span class="string">1.3 小结</span>](<span class="link">lesson01/1.3.md</span>)</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">第二章 JavaScript 和 DOM</span>](<span class="link">lesson02/dom.md</span>)</span><br></pre></td></tr></table></figure>

<p>上述内容添加到SUMMARY.md后，执行<code>gitbook serve</code>即可预览 <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<img src="/blog/19654/gitbook-serve-page.png" class="">

<ul>
<li><code>-o, --output &lt;directory&gt;</code> 指定构建的静态文件输出目录，默认 ./_book</li>
<li><code>-f, --format &lt;name&gt;</code> 指定输出格式</li>
<li><code>--config &lt;config file&gt;</code> 指定配置文件，默认为 ./book.js 或 ./book.json</li>
</ul>
<p>注意：要想把侧边栏导航的“Introduction”更改成中文语言，需要按照上述写法，把README.md链接到无序列表上。其它写法或者不写，README.md默认都会指向“Introduction”</p>
<h2 id="Gitbook-commands"><a href="#Gitbook-commands" class="headerlink" title="Gitbook commands"></a>Gitbook commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook <span class="built_in">help</span>                   <span class="comment">#列出所有指令</span></span><br><span class="line">gitbook --<span class="built_in">help</span>                 <span class="comment">#列出gitbook-cli的指令</span></span><br><span class="line">gitbook --version              <span class="comment">#查看版本</span></span><br><span class="line">gitbook update                 <span class="comment">#更新</span></span><br><span class="line">gitbook init                   <span class="comment">#初始化</span></span><br><span class="line">gitbook serve                  <span class="comment">#生成静态网页并运行服务器</span></span><br><span class="line">gitbook serve -p 8000</span><br><span class="line">gitbook build                  <span class="comment">#生成静态网页(点击index.html可直接使用的，默认生成到 ./_book)</span></span><br><span class="line">gitbook build ./ ./docs        <span class="comment">#使用github pages时，静态文件生成到 ./docs</span></span><br><span class="line">gitbook ls                     <span class="comment">#列出本地所有的gitbook版本</span></span><br><span class="line">gitbook current                <span class="comment">#列出当前使用的版本</span></span><br><span class="line">gitbook ls-remote              <span class="comment">#列出远程所有的gitbook版本</span></span><br><span class="line">gitbook fetch 1.0.0            <span class="comment">#安装指定版本</span></span><br><span class="line">gitbook build --gitbook=1.0.0  <span class="comment">#指定gitbook版本生成静态网页, 本地没有会先下载</span></span><br><span class="line">gitbook uninstall 1.0.0        <span class="comment">#卸载gitbook版本</span></span><br><span class="line">gitbook install                <span class="comment">#安装插件也可使用npm</span></span><br><span class="line">gitbook build --<span class="built_in">log</span>=debug      <span class="comment">#指定log的级别</span></span><br><span class="line">gitbook pdf                    <span class="comment">#生成pdf文件，需要单独下载 ebook-convert https://gist.github.com/AaronO/9962667</span></span><br><span class="line">gitbook epub</span><br><span class="line">gitbook mobi</span><br></pre></td></tr></table></figure>

<h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>在项目根目录下创建book.json，还可以针对特性格式用css设置样式</p>
<figure class="highlight json"><figcaption><span>./book.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;styles&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;website&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;ebook&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pdf&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;mobi&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;epub&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如隐藏侧边栏的Published with GitBook字样</p>
<figure class="highlight css"><figcaption><span>./style/website.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gitbook-link</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h2><p>设置书籍的封面，可让书籍看上去更加正规及其优雅。封面图片的格式为JPEG或PNG。也可使用 <a href="https://www.npmjs.com/package/gitbook-plugin-autocover">gitbook-plugin-autocover</a> 插件生成封面</p>
<ul>
<li>cover.jpg：1800x2360px</li>
<li>cover_small.jpg：200x262px</li>
</ul>
<p>封面遵循</p>
<ul>
<li>没有边框</li>
<li>清晰可见的书籍标题</li>
<li>任何重要的文字在小版本（cover_small）中都应该是可见的</li>
</ul>
<h2 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h2><p>在GLOSSARY.md可以设置特定的词汇，鼠标移到GitBook任意文章的特定词汇上，会提示词汇的示意，类似HTML的alt效果</p>
<figure class="highlight markdown"><figcaption><span>./GLOSSARY.md</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">## Git</span></span><br><span class="line">分散式版本控制软件</span><br></pre></td></tr></table></figure>

<h2 id="Langs"><a href="#Langs" class="headerlink" title="Langs"></a>Langs</h2><p>GitBook支持使用多语言来构建书籍。需要在项目的根目录下创建LANGS.md文件，并为每种语言创建一个子目录，该子目录下必须含有README.md和SUMMARY.md。例如：<a href="https://github.com/GitbookIO/git">https://github.com/GitbookIO/git</a></p>
<figure class="highlight markdown"><figcaption><span>./LANGS.md</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> [<span class="string">英语</span>](<span class="link">en/</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">法语</span>](<span class="link">fr/</span>)</span><br><span class="line"><span class="bullet">*</span> [<span class="string">西班牙语</span>](<span class="link">es/</span>)</span><br></pre></td></tr></table></figure>

<p>如果只是设置中文简体语言，只需要在book.json内添加<code>&quot;language&quot;: &quot;zh-hans&quot;</code>即可</p>
<h2 id="Ignore"><a href="#Ignore" class="headerlink" title="Ignore"></a>Ignore</h2><p>设置需要忽略的文件/文件夹，GitBook会自动读取根目录下的<code>.gitignore</code>、<code>.bookignore</code>和<code>.ignore</code></p>
<figure class="highlight bash"><figcaption><span>./.gitignore</span></figcaption><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">_book/</span><br><span class="line">node_modules/</span><br></pre></td></tr></table></figure>

<h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p>本文以集成Github为例，演示Gitbook如何发布电子书籍</p>
<ol>
<li>在Github上创建开源仓库gitbook-example（如何创建此处不赘述）<br>1.1. <code>git init</code><br>1.2. <code>git remote add origin &lt;git......&gt;</code><br>1.3. <code>git add .</code><br>1.4. <code>git commit &quot;docs(add):initial&quot;</code><br>1.4. <code>git push --set-upstream origin master</code></li>
<li>注册Gitbook（注册比较简单就不截图了），创建书籍项目（名称可不一样）并同步 gitbook-example 仓库的 master 分支</li>
</ol>
<img src="/blog/19654/create.png" class="">
<img src="/blog/19654/create-example.png" class="">
<img src="/blog/19654/github.png" class="">
<img src="/blog/19654/link-github.png" class="">
<img src="/blog/19654/github-select-item.png" class="">
<img src="/blog/19654/github-select-branch.png" class="">

<p>设置完成以后，再push到Github上，Gitbook内的书籍就会自动拉取更新。分享出去或者访问该书籍，请到侧边栏的 share 内查看</p>
<img src="/blog/19654/gitbook-share.png" class="">

<p>除了在Gitbook显示静态网页外，我们还可以开启Github Pages，开启的前提是，使用Gitbook build把静态文件发布到根目录下的docs内，然后再到gitbook-example仓库下开启Github Pages</p>
<ol>
<li>本地项目下执行 <code>gitbook build ./ ./docs</code></li>
<li><code>git add .</code></li>
<li><code>git commit -m &quot;docs(add):docs folder&quot;</code></li>
<li><code>git push</code></li>
<li>gitbook-example仓库下选择 Settings -&gt; Github Pages -&gt; Source -&gt; master branch/docs folder 开启</li>
<li>浏览器打开 <a href="https://your_name.github.io/gitbook-example/">https://your_name.github.io/gitbook-example/</a> ，就可以访问你的书籍了</li>
</ol>
<img src="/blog/19654/github-pages.png" class="">

<h2 id="Book-json"><a href="#Book-json" class="headerlink" title="Book.json"></a>Book.json</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment"># JSON不支持注释，使用时请删除</span></span><br><span class="line">  <span class="comment"># 常规设置</span></span><br><span class="line">  <span class="comment"># =======================================</span></span><br><span class="line">  <span class="comment"># 设置根目录地址</span></span><br><span class="line">  <span class="string">&quot;root&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  <span class="comment"># 输出文件夹</span></span><br><span class="line">  <span class="string">&quot;output&quot;</span>: null,</span><br><span class="line">  <span class="comment"># 输出的书籍类型</span></span><br><span class="line">  <span class="string">&quot;generator&quot;</span>: <span class="string">&quot;site&quot;</span>,</span><br><span class="line">  <span class="comment"># ebook格式 &quot;epub&quot;, &quot;pdf&quot;, &quot;mobi&quot;</span></span><br><span class="line">  <span class="string">&quot;extension&quot;</span>: null,</span><br><span class="line">  <span class="comment"># 书籍标题</span></span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;GitBook Example&quot;</span>,</span><br><span class="line">  <span class="comment"># 作者</span></span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;qinlzhu&quot;</span>,</span><br><span class="line">  <span class="comment"># 书籍描述</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;This is GitBook Example&quot;</span>,</span><br><span class="line">  <span class="comment"># 书籍语言</span></span><br><span class="line">  <span class="string">&quot;language&quot;</span>: <span class="string">&quot;zh-hans&quot;</span>,</span><br><span class="line">  <span class="comment"># 书籍的国际标准书号</span></span><br><span class="line">  <span class="comment"># https://isbnsearch.org/</span></span><br><span class="line">  <span class="string">&quot;isbn&quot;</span>: <span class="string">&quot;978-0-13-601970-1&quot;</span>,</span><br><span class="line">  <span class="comment"># 书籍版本</span></span><br><span class="line">  <span class="comment"># https://semver.org/lang/zh-CN/</span></span><br><span class="line">  <span class="string">&quot;gitbook&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="comment"># 书籍各格式自定义的样式</span></span><br><span class="line">  <span class="string">&quot;styles&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;website&quot;</span>: <span class="string">&quot;./styles/website.css&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># 目录结构配置</span></span><br><span class="line">  <span class="comment"># 指定README.md,SUMMARY.md,GLOSSARY.md和LANGS.md文件名称</span></span><br><span class="line">  <span class="string">&quot;structure&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;readme&quot;</span>: <span class="string">&quot;README.md&quot;</span>,</span><br><span class="line">    <span class="string">&quot;summary&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># 侧边栏链接</span></span><br><span class="line">  <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;sidebar&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;blog&quot;</span>: <span class="string">&quot;https://qlzhu.github.io/blog&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># 插件列表</span></span><br><span class="line">  <span class="comment"># https://www.npmjs.com/search?q=gitbook-plugin</span></span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">    <span class="comment"># 去除自带的插件</span></span><br><span class="line">    <span class="string">&quot;-search&quot;</span>,</span><br><span class="line">    <span class="string">&quot;github&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment"># 各插件配置列表</span></span><br><span class="line">  <span class="string">&quot;pluginsConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;github&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://qlzhu.github.io/blog&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment"># PDF配置</span></span><br><span class="line">  <span class="string">&quot;pdf&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;toc&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;pageNumbers&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;fontSize&quot;</span>: 12,</span><br><span class="line">    <span class="string">&quot;paperSize&quot;</span>: <span class="string">&quot;a4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;margin&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;right&quot;</span>: 62,</span><br><span class="line">      <span class="string">&quot;left&quot;</span>: 62,</span><br><span class="line">      <span class="string">&quot;top&quot;</span>: 36,</span><br><span class="line">      <span class="string">&quot;bottom&quot;</span>: 36</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>gitbook</category>
      </categories>
      <tags>
        <tag>gitbook</tag>
        <tag>SUMMARY.md</tag>
        <tag>LANGS.md</tag>
        <tag>book.json</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions CI 工作流程</title>
    <url>/blog/40311/</url>
    <content><![CDATA[<p><a href="https://help.github.com/cn/actions">Github Actions</a> 是 Github 在2018年10月推出的持续集成 (Con­tin­u­ous in­te­gra­tion，简称 CI) 服务，2019年11月正式开放。Github Actions 提供了配置非常不错的虚拟服务器环境，基于它可以进行构建、测试、打包、部署项目。Github Actions 的另一个好处就是 Github 为它专门在市场开辟了专栏，如果你需要某个 Action 的话，完全没必要自己写复杂的脚本，直接引用它人的脚本即可<span class="text-gray">（推荐到 <a href="https://github.com/marketplace?type=actions">Github市场</a>、<a href="https://github.com/actions">Github官方Action脚本</a>、<a href="https://github.com/sdras/awesome-actions">Awesome Actions</a> 内查找需要的Action）</span></p>
<div class="note ">
            <p>Github Actions术语：</p><ol><li>Workflow 工作流程 <span class="text-gray">（持续集成一次运行的整个流程）</span></li><li>Job 任务 <span class="text-gray">（1~N个Job组成Workflow）</span><br><span class="text-gray">注意部署的虚拟服务器系统，会影响到Jobs同时触发的个数。免费版部署macos系统最多能触发5个、其它系统则最多能触发20个。详情请查阅 <a href="https://help.github.com/cn/actions/reference/workflow-syntax-for-github-actions#usage-limits">https://help.github.com/cn/actions/reference/workflow-syntax-for-github-actions#usage-limits</a></span></li><li>Step 步骤 <span class="text-gray">（1~N个Step组成Job）</span></li><li>Action 动作\命令 <span class="text-gray">（1~N个Action组成Step）</span></li><li>Workflow File 配置文件 yaml 格式，需要放置在项目根目录下 .github/workflow/ 内</li></ol>
          </div>
<span id="more"></span>

<h2 id="部署hexo实践"><a href="#部署hexo实践" class="headerlink" title="部署hexo实践"></a>部署hexo实践</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>首先在 Github 上创建个 <a href="https://github.com/qLzhu/github-actions-test">github-actions-test</a> 空白仓库，然后再在本地创建个同名的仓库，并跟远程仓库关联起来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir github-actions-test &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">hexo init &amp;&amp; git init</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;docs(new):initial&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署静态网站时 Github 默认拉取的分支即该分支</span></span><br><span class="line">git branch gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库并提交</span></span><br><span class="line"><span class="comment"># 注意：要把 username 换成你的 GitHub 用户名</span></span><br><span class="line">git remote add origin git@github.com:username/github-actions-test.git</span><br><span class="line">git push -u origin master</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<p>配置 hexo _config.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="comment"># username 换成你的 GitHub 用户名</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://username.github.io/github-actions-test</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/github-actions-test/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">.nojekyll</span></span><br></pre></td></tr></table></figure>

<p>再在 source/ 目录下创建空白文件 .nojekyll</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="built_in">source</span>/</span><br><span class="line">touch .nojekyll</span><br></pre></td></tr></table></figure>

<p>配置 hexo _config.yml 和创建 .nojekyll 是为了绕过 GitHub Pages 上的Jekyll处理，不然 GitHub Pages 会报 <code>The tag fancybox on line 77 in themes/landscape/README.md is not a recognized Liquid tag.</code> 错误。下述是问题参考链接：</p>
<p><a href="https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/">https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/</a><br><a href="https://github.com/theme-next/hexo-theme-next/issues/410">https://github.com/theme-next/hexo-theme-next/issues/410</a><br><a href="https://help.github.com/cn/github/working-with-github-pages/about-github-pages-and-jekyll">https://help.github.com/cn/github/working-with-github-pages/about-github-pages-and-jekyll</a></p>
<h3 id="创建-Token"><a href="#创建-Token" class="headerlink" title="创建 Token"></a>创建 Token</h3><p>在 Github 上 <strong>Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</strong> 处创建一个新的 token，该 token 只开启一个 repo 权限即可</p>
<div class="note ">
            <p>让Github自动为工作流创建token也行，只需要在需要token的地方换成 &#36;&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; 即可。详情请参考 <a href="https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token">https://help.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token</a></p><p>还有一种是ssh-keygen的方式，把公钥保存到 Settings - SSH and GPG keys，私钥保存到 Settings - Secrets <a href="https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>
          </div>

<blockquote>
<p><code>Note</code> 的名称随意，自己看到知道是什么token就没问题<br>实在不知道如何创建token的请查阅 <a href="https://help.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">https://help.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</a></p>
</blockquote>
<img src="/blog/40311/Set_Github_Tokens.png" class="" title="设置 token">

<p>设置好后，滚动到界面最下方，点击 Generate token 按钮进行创建。注意：创建完的 token 只有第一次可见，之后再访问皆无法再见<span class="text-gray">（只能看见 token 的名称）</span>，想查看只能重新再创建，因此要保存好这个值</p>
<img src="/blog/40311/Token_hash.png" class="" title="token 值">

<h3 id="设置-Token"><a href="#设置-Token" class="headerlink" title="设置 Token"></a>设置 Token</h3><p>把刚才生成的 token 值保存到当前仓库的 <code>Settings - Secrets</code> 里面。Name 的名称随意，建议名称全部大写并加下划线的形式，Workflow File 配置文件内会用到该名称</p>
<img src="/blog/40311/GH_ACTION_TEST_KEY.png" class="" title="token保存到当前项目">

<h2 id="配置-Workflow-File"><a href="#配置-Workflow-File" class="headerlink" title="配置 Workflow File"></a>配置 Workflow File</h2><p>在项目的根目录下，创建 <code>.github/workflows/deploy.yml</code> 文件，并键入下述内容</p>
<figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span><a href="/blog/_data/includecode/workflow-file.yml">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更多参数详情，请查阅</span></span><br><span class="line"><span class="comment"># https://help.github.com/cn/actions</span></span><br><span class="line"><span class="comment"># https://p3terx.com/archives/github-actions-started-tutorial.html</span></span><br><span class="line"><span class="comment"># http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Github</span> <span class="string">Action</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span>  <span class="comment">#工作流的名称，随便定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发工作流的事件</span></span><br><span class="line"><span class="comment"># 下面设置的是当 push 到 master 分支后触发</span></span><br><span class="line"><span class="comment"># 其它事件还有 pull_request | page_build | release | ...</span></span><br><span class="line"><span class="comment"># https://help.github.com/en/actions/reference/events-that-trigger-workflows</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jobs 即工作流中的执行任务</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span>                              <span class="comment">#Job_id 名称为 build，自主定义</span></span><br><span class="line">    <span class="comment">#name: Deploy webiste             #name 是 job_id 的说明，省略后的 name 值，会默认为 Job_id 的值</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span>            <span class="comment">#设置虚拟服务器环境（ubuntu最新版本）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务步骤集合</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Code</span>               <span class="comment">#Action 名称，自主定义</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>     <span class="comment">#使用 Github Action 官方可重用的脚本，actions/checkout 获取源码</span></span><br><span class="line">                                      <span class="comment">#@ 后面可指定分支、release 版本或特定的 commit</span></span><br><span class="line">                                      <span class="comment">#https://help.github.com/cn/actions/building-actions/about-actions#versioning-your-action</span></span><br><span class="line">        <span class="comment"># with:                       #当前 actions 的一些配置</span></span><br><span class="line">        <span class="comment">#   submodules: true          #项目内有 Git 子项目时可以设为 true，拉取的时候会一并拉取下来</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span>        <span class="comment">#设置要安装的 Node 版本</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NPM</span> <span class="string">Install</span> <span class="string">Packges</span>     <span class="comment">#设置 npm 要执行的步骤，当成本地操作就行</span></span><br><span class="line">        <span class="comment"># run: npm install            #run 可设置执行的命令，一个 step 直接写，多个按照下方格式写</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">JamesIves/github-pages-deploy-action@releases/v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">${{</span> <span class="string">secrets.GH_ACTION_TEST_KEY</span> <span class="string">}}</span> <span class="comment">#在 Settings/Secrets 内设置的 token 名称</span></span><br><span class="line">                                                          <span class="comment">#未创建个人Token的，请换成${{ secrets.GITHUB_TOKEN }}</span></span><br><span class="line">          <span class="attr">BRANCH:</span> <span class="string">gh-pages</span>            <span class="comment">#要部署到哪个分支</span></span><br><span class="line">          <span class="attr">FOLDER:</span> <span class="string">public</span>              <span class="comment">#从那个文件夹内复制静态文件</span></span><br><span class="line">          <span class="attr">COMMIT_NAME:</span> <span class="string">&quot;Github Pages Deploy Action&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 以下是 Jobs 的执行顺序说明</span></span><br><span class="line">  <span class="comment"># 不要复制</span></span><br><span class="line">  <span class="comment"># -------------------------------------------</span></span><br><span class="line">  <span class="comment"># jobs2:</span></span><br><span class="line">  <span class="comment">#   needs: build</span></span><br><span class="line">  <span class="comment"># job3:</span></span><br><span class="line">  <span class="comment">#   needs: [build, jobs2]</span></span><br><span class="line">  <span class="comment"># -------------------------------------------</span></span><br><span class="line">  <span class="comment"># 多个任务时，使用 needs 排列执行顺序，否则同时运行</span></span><br></pre></td></tr></table></figure>

<p>编辑完成后 push 到远程仓库，紧接着 Actions 就会显示构建界面</p>
<img src="/blog/40311/Successful.png" class="" title="Actions部署成功界面">

<p>你还可以把 build passing 图标放置在你想展示的地方</p>
<img src="/blog/40311/Build_Passing.png" class="" title="build passing 图标">

<div class="note ">
            <p>Github Actions限制策略：</p><ol><li>每个仓库只能同时支持20个Workflow并行，每个Workflow最多允许运行72小时，超时会自动取消该工作流</li><li>每小时可以调用1000次GitHub API</li><li>每个Job最多可以执行6个小时，超过该时间会自动终止Job</li><li>私有仓库每月累计使用时间为2000分钟，超过后$0.008/分钟，公共仓库则无限制</li></ol><p>虽然名称叫持续集成，但当所有任务终止和完成时，虚拟环境内的数据会随之清空，并不会持续。即每个新任务都是一个全新的虚拟环境。</p>
          </div>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>actions</tag>
        <tag>github actions</tag>
        <tag>github-pages-deploy-action</tag>
        <tag>not a recognized Liquid tag</tag>
      </tags>
  </entry>
  <entry>
    <title>API 获取 Github ID</title>
    <url>/blog/8621/</url>
    <content><![CDATA[<p>获取 Github 当前账户的 ID，可使用官方给出的 API 是 <code>https://api.github.com/users/github</code>，把最后的 Github 换成你的用户名，直接在浏览器地址栏中输入回车即可获取，输出如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;login&quot;</span>: <span class="string">&quot;qLzhu&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>***<span class="number">59</span>,</span><br><span class="line">  <span class="attr">&quot;node_id&quot;</span>: <span class="string">&quot;MDQX****DIzMzU5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gravatar_id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>Github ID</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Action 部署 blog</title>
    <url>/blog/19620/</url>
    <content><![CDATA[<p>之前使用的免费版 <a href="https://app.travis-ci.com/">Travis CI</a> 由于有时间限制，所以，本次把自动部署更改为 <a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">Github Action</a> 进行部署。</p>
<h2 id="创建-Github-Token"><a href="#创建-Github-Token" class="headerlink" title="创建 Github Token"></a>创建 Github Token</h2><p>在 Github 上 <span class="label default">Settings -> Developer settings -> Personal access tokens -> Generate new token 处创建一个新的 token</span></p>
<ul>
<li>Note：Token的名称随便定义</li>
<li>Expiration：Token的有效期，我设置的长时间即No expiration</li>
<li>Select scopes：一定要勾选 repo、workflow 两个选项<span id="more"></span>

</li>
</ul>
<img src="/blog/19620/CreateToken.jpg" class="" title="创建新的Token">

<p>创建成功后该 Token 值只显示一次<br>所以，我们需要先保存好该值，否则刷新返回界面后无法再找回</p>
<img src="/blog/19620/accesstoken.jpg" class="" title="Token值">

<h2 id="设置项目-Token"><a href="#设置项目-Token" class="headerlink" title="设置项目 Token"></a>设置项目 Token</h2><p>到 <span class="label default">Github项目下的 -> settings -> Secrets -> New repository secret</span> 处粘贴刚才创建的 Token</p>
<img src="/blog/19620/saveToken.jpg" class="" title="Token保存在到项目下">

<h2 id="在项目下创建-workflow-文件"><a href="#在项目下创建-workflow-文件" class="headerlink" title="在项目下创建 workflow 文件"></a>在项目下创建 workflow 文件</h2><p>Github Action 使用的是 YAML 语法来定义的，执行文件需要保存到项目根目录下的 .github/workflows 内</p>
<p>这里我们创建一个名称叫 hexo-deploy.yml 的可执行文件<br>执行文件名称可随便定义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir .github/workflows &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">touch hexo-deploy.yml</span><br></pre></td></tr></table></figure>

<p>我们使用编辑器打开该文件（也可直接在编辑器内直接创建目录及其文件 随意 怎么方便怎么来）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目名称，随意定义</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定 master 分支 push 时可触发下述事件</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># 任务名称，可随便定义</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="comment"># 定义执行的虚拟环境</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># 事件步骤固定格式</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 获取 blog 源码及其主题</span></span><br><span class="line">      <span class="comment"># uses 使用的是哪个 Action 插件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="comment"># with 下是该插件的参数</span></span><br><span class="line">        <span class="comment"># 我们使用的是 Next 主题下面的设置至关重要，否则会报错</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 设置 node 执行环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">12.</span><span class="string">x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">      <span class="comment"># 设置缓存以此加快工作流</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="comment"># 安装依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">npm</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="comment"># hexo 生成静态文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">      <span class="comment"># 部署静态文件到 gh-pages 分支</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意</span></span><br><span class="line">          <span class="comment"># 注意</span></span><br><span class="line">          <span class="comment"># 这里的 BLOG_TOKEN 名称要与我们在第二个步骤时设定的名称保持一致</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.BLOG_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<p>至此 Github Action 设置完毕，我们正常使用 git 提交文件即可，剩余静态文件的部署会有 Action 帮我们完成！</p>
<img src="/blog/19620/ok.jpg" class="" title="Action部署成功界面">

<h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><ul>
<li><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">Github Action</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>travis</tag>
        <tag>token</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 复原删除的仓库</title>
    <url>/blog/9273/</url>
    <content><![CDATA[<p>今日清理资料时，同时删除了本地和Github上的仓库。后来才发现项目还有用，接着就是KB的在本地尝试各种恢复办法，查阅了很多资料也未能成功，最后还是在<a href="https://help.github.com/cn/github/administering-a-repository/restoring-a-deleted-repository">Github帮助</a>里找到了恢复远程仓库的办法。 </p>
<p>找回步骤如下：</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Settings - Repositories - Deleted repositories</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<p>注意只能恢复90天内删除的仓库哦～</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>github Delete</tag>
      </tags>
  </entry>
  <entry>
    <title>git子模块添加hexo-theme-next</title>
    <url>/blog/46430/</url>
    <content><![CDATA[<p>博客重构执行 <code>git add</code> 时报如下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">warning: adding embedded git repository: themes/next</span><br><span class="line">hint: You&#x27;ve added another git repository inside your current repository.</span><br><span class="line">hint: Clones of the outer repository will not contain the contents of</span><br><span class="line">hint: the embedded repository and will not know how to obtain it.</span><br><span class="line">hint: If you meant to add a submodule, use:</span><br><span class="line">hint:</span><br><span class="line">hint:   git submodule add &lt;url&gt; themes/next</span><br><span class="line">hint:</span><br><span class="line">hint: If you added this path by mistake, you can remove it from the</span><br><span class="line">hint: index with:</span><br><span class="line">hint:</span><br><span class="line">hint:   git rm --cached themes/next</span><br><span class="line">hint:</span><br><span class="line">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>这是因为 git 检测到 themes/next 目录是来自另一个 git 项目，不能直接作为本项目的文件进行上传</p>
<p>解决办法如下：</p>
<ol>
<li>删除 themes/next/.git 目录</li>
<li>把 hexo-theme-next 添加到 git 子模块</li>
</ol>
<p>我们采用第二种方式进行解决。先使用 <code>git rm -r --cached themes/next</code> 清除下暂存区和储存区中的 NexT 记录</p>
<p>再使用 <code>git submodule</code> 命令把 hexo-theme-next 添加到 git 子模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule add https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>执行后，git 会在根目录下生成一个 <code>.gitmodules</code> 文件。运行 <code>cat .gitmodules</code>，我们应该看到这样的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">  path = themes/next</span><br><span class="line">  url = https://github.com/theme-next/hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>至此再添加或者提交的话，就没问题啦</p>
<p>如果你想把 hexo-theme-next 添加到 git 子模块，单独提交一个 commit 的话，可先把 themes/next 排除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git reset -- themes/</span><br></pre></td></tr></table></figure>

<p>注意：以后更新 hexo-theme-next 子模块的话，需要使用 <code>git submodule update</code> 命令。以下列几个常用的命令，更多请查阅 GIT-SCM 官网 <a href="https://git-scm.com/docs/git-submodule">https://git-scm.com/docs/git-submodule</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add [<span class="string">&quot;remote repo&quot;</span>]                         <span class="comment">#添加子模块</span></span><br><span class="line">git submodule add [<span class="string">&quot;remote repo&quot;</span>] [<span class="string">&quot;path\submodule name&quot;</span>]</span><br><span class="line">git submodule init                                        <span class="comment">#初始化本地配置文件</span></span><br><span class="line">git submodule updata                                      <span class="comment">#拉取子模块数据</span></span><br><span class="line">git submodule updata [<span class="string">&quot;path\submodule name&quot;</span>]</span><br><span class="line">git <span class="built_in">clone</span> --recursive [<span class="string">&quot;remote repo&quot;</span>]                     <span class="comment">#克隆包含子模块的仓库</span></span><br><span class="line">git rm [<span class="string">&quot;path\submodule name&quot;</span>]                            <span class="comment">#删除子模块</span></span><br><span class="line">git submodule foreach [<span class="string">&quot;command&quot;</span>]                         <span class="comment">#遍历子模块执行同样的命令</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>git submodule add &lt;url&gt; themes/next</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis CI 自动化部署静态博客</title>
    <url>/blog/65246/</url>
    <content><![CDATA[<h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>登陆 <a href="https://github.com/">GitHub</a> 创建一个空的开源项目 trcl（<span class="text-gray">项目名称随意，初次测试 Travis CI 最好跟着本文逐步操作，了解后再自己测试</span>）</p>
<img src="/blog/65246/New_Repository.png" class="" title="Github上新建项目">
<span id="more"></span>

<p>项目新建后，再使用如下命令初始化本地项目（<span class="text-gray">不能直接 <code>Git Clone</code> 到本地再初始化，因为 <code>hexo init</code> 的必须是空白项目</span>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir trcl &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">hexo init &amp;&amp; git init</span><br></pre></td></tr></table></figure>

<p>和远程 origin（<span class="text-gray">克隆版本库的时候，所使用的远程主机自动被Git命名为origin</span> ）建立链接关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:***/trcl.git</span><br></pre></td></tr></table></figure>

<p>landscape 主题更改为 NexT 主题，并提交到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line">rm -rf themes/landscape/</span><br><span class="line"><span class="comment"># NexT主题设置为Git子模块命令</span></span><br><span class="line">git submodule add https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;docs:init blog&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建 gh-pages 分支用来部署静态网站</span></span><br><span class="line">git branch gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git push -u origin master</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<h2 id="配置-Hexo-config-yml"><a href="#配置-Hexo-config-yml" class="headerlink" title="配置 Hexo _config.yml"></a>配置 Hexo _config.yml</h2><p>把 gh-pages 分支提交到远程仓库后，Github 会直接把该分支作为静态网站进行部署，无需额外设置。生产的二级网址格式是 <code>https://username.github.io/trcl</code>，把 username 更换成你 Github 的用户名填写到下面（<span class="text-gray">不知道用户名的请到 Github Settings -&gt; GitHub Pages 处查看</span>）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://yourname.github.io/trcl</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/trcl/</span></span><br></pre></td></tr></table></figure>

<h2 id="创建-Token"><a href="#创建-Token" class="headerlink" title="创建 Token"></a>创建 Token</h2><p>在 Github 上 <strong>Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</strong> 处创建一个新的 token，该 token 只开启一个 repo 权限即可</p>
<blockquote>
<p><code>Note</code> 的名称随意，自己看到知道是什么token就没问题<br>实在不知道如何创建token的请查阅 <a href="https://help.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line">https://help.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line</a></p>
</blockquote>
<img src="/blog/65246/Set_Github_Tokens.png" class="" title="设置 token">

<p>设置好后，滚动到界面最下方，点击 Generate token 按钮进行创建。注意：创建完的 token 只有第一次可见，之后再访问皆无法再见（<span class="text-gray">只能看见 token 的名称</span>），想查看只能重新再创建，因此要保存好这个值</p>
<img src="/blog/65246/Token_hash.png" class="" title="token 值">

<h2 id="配置-Travis-CI"><a href="#配置-Travis-CI" class="headerlink" title="配置 Travis CI"></a>配置 Travis CI</h2><p>登陆或注册 <a href="https://travis-ci.com/">Travis CI</a> 需要使用 GitHub 账户，成功后应该是如下界面。到该界面后选择以下任意一个按钮点击（<span class="text-gray">+或者Activate all repositories using github apps</span>），进行 GitHub 项目的选择进行部署 Travis CI</p>
<img src="/blog/65246/Travis_CI_Sign_In.png" class="" title="注册Travis CI">
<img src="/blog/65246/Select_Trcl.png" class="" title="部署Travis CI">

<p>Travis CI 部署到我们 trcl 项目后，我们还需要在 Travis CI 里把上一步创建的 token 值，配置到项目内</p>
<img src="/blog/65246/Select_Trcl_Successful.png" class="" title="设置token">
<img src="/blog/65246/Set_Trcl_Token.png" class="" title="添加token界面">

<div class="note ">
            <p>说明：<br>“NAME” 名称随便定义<br>“VALUE” 填写上一步创建的 token 值<br>“BRANCH” 选择要监测的分支<br>“DISPLAY VALUE IN BUILD LOG” 是 token 值是否显示在日记的意思，不用开启</p>
          </div>

<h2 id="设置-travis-yml"><a href="#设置-travis-yml" class="headerlink" title="设置 .travis.yml"></a>设置 .travis.yml</h2><p>上述步骤全部完成后，我们就需要设置 Travis CI 的配置文件 .travis.yml 啦</p>
<figure class="highlight yml"><figcaption><span>.travis.yml</span><a href="/blog/_data/includecode/travis.yml">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>              <span class="comment"># 指定环境及其node_js版本</span></span><br><span class="line"><span class="attr">node_js:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">lts/*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span>                         <span class="comment"># 缓存设置，有利于提高下次构建的效率</span></span><br><span class="line">  <span class="attr">npm:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#notifications:                # 设置部署成功和失败时自动给你发送邮件</span></span><br><span class="line">  <span class="comment">#email:                      # https://docs.travis-ci.com/user/notifications</span></span><br><span class="line">    <span class="comment">#recipients:</span></span><br><span class="line">      <span class="comment">#- vensing@foxmail.com</span></span><br><span class="line">    <span class="comment">#on_success: never</span></span><br><span class="line">    <span class="comment">#on_failure: never</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span>                       <span class="comment"># 安装阶段</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span>                        <span class="comment"># 执行构建阶段</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span>                 <span class="comment"># hexo 的清理命令</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span>              <span class="comment"># hexo 的生成（构建）命令，即最核心的生成静态文件过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Pages Deployment</span></span><br><span class="line"><span class="attr">deploy:</span>                        <span class="comment"># 部署阶段</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span>              <span class="comment"># 约定 pages 为 GitHub Pages 服务，必须且不可更改</span></span><br><span class="line">  <span class="comment">#name: &quot;yourname&quot;            # 提交者</span></span><br><span class="line">  <span class="comment">#email: &quot;yourname@email.com&quot; # 提交者邮箱</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span>           <span class="comment"># 必须跳过清理，否则过程中生成的文件（要发布的静态资源）会被清理</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$Trcl_Token</span>    <span class="comment"># Travis CI 设置 token 名称</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span>           <span class="comment"># 设置为 false 时，使用 `git push --force` 命令覆盖历史记录</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span>             <span class="comment"># 仅监听 master 分支的变化，才执行构建</span></span><br><span class="line">  <span class="attr">target-branch:</span> <span class="string">gh-pages</span>      <span class="comment"># 用于存放静态资源的分支</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span>            <span class="comment"># `hexo generate` 命令生成的静态资源所在路径</span></span><br><span class="line">  <span class="comment">#fqdn:                       # 自定义域名</span></span><br></pre></td></tr></table></figure>

<p>按照如上配置设置完成后，分别执行下<code>git add</code>、<code>git commit</code> 和 <code>git push</code> 提交下</p>
<p>此时你再回到 Travis CI 应该可以看到构建成功的界面或者正在构建的界面（<span class="text-gray">如果构建失败，解决问题后重新提交 commit，再点击 Restart build 重新执行即可</span>）</p>
<img src="/blog/65246/Travis_CI_Current.png" class="" title="构建成功界面">

<p>另外点击 build passing 图标，还能够获得其链接，可以将它贴在其他地方，随时监控博客的 build 状态</p>
<h2 id="删除-Travis-CI-项目"><a href="#删除-Travis-CI-项目" class="headerlink" title="删除 Travis CI 项目"></a>删除 Travis CI 项目</h2><img src="/blog/65246/Delete.png" class="" title="Travis CI 项目管理界面">
<img src="/blog/65246/Delete_item.png" class="" title="删除界面">

<ul>
<li>单个项目时，直接在 Github 上删除仓库即可</li>
<li>多个项目时，按照上述步骤删除部署 Travis CI 的项目</li>
</ul>
<h2 id="阅读拓展"><a href="#阅读拓展" class="headerlink" title="阅读拓展"></a>阅读拓展</h2><ul>
<li><a href="https://hexo.io/zh-cn/index.html">Hexo 官网</a></li>
<li><a href="https://travis-ci.com/">Travis CI 官网</a></li>
<li><a href="https://docs.travis-ci.com/user/deployment/pages/">GitHub Pages Deployment</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">阮一峰：持续集成服务 Travis CI 教程</a></li>
<li><a href="https://g2ex.top/2019/06/28/hexo-with-travis-ci/">G2ex：使用 Travis 自动化部署 Hexo Blog</a></li>
<li><a href="https://notes.iissnan.com/2016/publishing-github-pages-with-travis-ci/">iissnan：使用 Travis CI 自动更新 GitHub Pages</a></li>
<li><a href="https://blog.i1hao.com/2018/09/01/hexo-and-githubpages-best-practices/">Hexo + GitHub Pages + Travis CI 自动化部署静态博客</a></li>
<li><a href="http://claude-ray.com/2019/08/01/travis-npm-cache/">警惕 Travis CI 的 npm 缓存</a></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Travis CI</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO Google 搜索引擎收录设置</title>
    <url>/blog/10730/</url>
    <content><![CDATA[<p>博客只是单纯的部署到 Github Pages，各大搜索引擎是不会主动收录博客内容的，需要我们手动提交并设置。2015年3月26日，中国内网和互联网边界的某个设备劫持了进入中国的 HTTP 连接，将一些来自百度的 JavaScript 文件替换为恶意文件，DDoS(distributed denial-of-service) 攻击了 Github Pages 上的 GreatFire 和纽约时报镜像。Github 从此屏蔽了百度，而且这个屏蔽措施至今都没有解除，所以此文不会赘述百度等搜索引擎的设置方案</p>
<blockquote>
<p><a href="https://www.githubstatus.com/">https://www.githubstatus.com/</a><br>科学上网请查阅 <a href="/blog/64387/" title="搭建 VPN 服务">搭建 VPN 服务</a><br>百度的兼容方案请查阅 <a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a> 和 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">hexo-generator-baidu-sitemap</a></p>
</blockquote>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>安装 <a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a> 插件</p>
<blockquote>
<p>执行 hexo g 时会自动在 public 下生成 sitemap.xml</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>在站点配置文件中设置 sitemap.xml 的路径，作用就是为搜索引擎指路，优化搜索结果，让你的网站出现在搜索结果中的地图，所以站点地图对网站非常重要</p>
<figure class="highlight yml"><figcaption><span>./_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<h2 id="reobots-txt"><a href="#reobots-txt" class="headerlink" title="reobots.txt"></a>reobots.txt</h2><p><a href="https://ziyuan.baidu.com/college/courseinfo?id=267&page=12#h2_article_title28" title="百度官方解释">robots</a> 是站点与蜘蛛 spider 沟通的重要渠道，站点通过 robots 文件声明不想被搜索引擎收录的部分或指定搜索引擎只收录特定的部分</p>
<ul>
<li>Allow    可以抓取的部分</li>
<li>Disallow 禁止抓取的部分</li>
<li>Sitemap  指定sitemap.xml的位置<span class="label info">（your_name注意修改成你Github的用户名）</span></li>
</ul>
<figure class="highlight plaintext"><figcaption><span>./source/robots.txt</span></figcaption><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /tags/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /404/</span><br><span class="line"></span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendor/</span><br><span class="line">Disallow: /styles/</span><br><span class="line"></span><br><span class="line">Sitemap: https://your_name.github.io/blog/sitemap.xml</span><br></pre></td></tr></table></figure>

<h2 id="Google-Search-Console"><a href="#Google-Search-Console" class="headerlink" title="Google Search Console"></a>Google Search Console</h2><p>打开 <a href="https://search.google.com/search-console/about?hl=zh-CN&utm_source=wmx&utm_medium=wmx-welcome">Google Search Console</a> 添加站点网址，并根据提示完成验证</p>
<img src="/blog/10730/google-verification.png" class="">

<p>选择 “其他验证方法” - “HTML 标记” 将会获取到一段 META 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;google-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;59As2-XGZdaAcxxxxxxxxxxxxxxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<img src="/blog/10730/google-verification-code.png" class="">

<p>将 content 属性的值 59As2-XGZdaAcxxxxxxxxxxxxxxx 追加到 ./source/_data/next.yml 底部保存，然后把所有更改 Push 到 Github，再去完成 Google Search Console 的验证</p>
<blockquote>
<p>只 Push 到 Github，是因为博客使用的是 Travis CI 自动部署的，所以不需要执行 <code>hexo deploy</code><br>如何设置自动化部署请查阅 <a href="/blog/65246/" title="Travis CI 自动化部署静态博客">Travis CI 自动化部署静态博客</a> 和 <a href="/blog/40311/" title="Github Actions CI 工作流程">Github Actions CI 工作流程</a></p>
</blockquote>
<figure class="highlight yml"><figcaption><span>./source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">google_site_verification:</span> <span class="string">59As2-XGZdaAcxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure>

<img src="/blog/10730/google-verification-succeed.png" class="">

<p>验证成功后进到后台，点击左侧站点地图，输入 sitemap.xml 确认提交，至此 Google 应该以收录你的站点了！</p>
<img src="/blog/10730/google-verification-sitemap.png" class="">

<p>检测站点是否被收录，可以使用 Google Search Console 的网址检测，还可以使用 Google 的搜索引擎搜索 <span class="label info">site:<域名></span> 来查看个人站点是否已被搜索引擎收录</p>
<img src="/blog/10730/google-verification-ispost.png" class="">
<img src="/blog/10730/google-search.png" class="">

<p>Google 抓取网页需要一定时间，站点地图提交后可能不会立即编入索引。如果验证结果没有收录，可以在几分钟后再次验证。</p>
<p>至此，你的个人网站已被 Google 收录。如果你对站点地图文件做出了更改，Google 会在下次抓取你的网站时发现你的更改，所以不必重新提交已知的站点地图</p>
<h2 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h2><p>想了解更为详细的站点访问数，访问时间，用户分布等信息，可以使用 <a href="https://analytics.google.com/">Google Analytics</a> ，它可以有效的帮助你掌握网站情况，更好地管理网站</p>
<ol>
<li>注册 <a href="https://analytics.google.com/">Google Analytics</a> 并根据提示填写相关信息</li>
<li>获取账户的跟踪 ID 并部署到站点上</li>
</ol>
<img src="/blog/10730/google-analytics-setting.png" class="">
<img src="/blog/10730/google-analytics-id.png" class="">

<figure class="highlight yml"><figcaption><span>./source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line">  <span class="attr">tracking_id:</span> <span class="string">UA-XXXXXXXXXX</span></span><br><span class="line">  <span class="attr">only_pageview:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Push 到 Github</li>
<li>使用 <a href="https://analytics.google.com/">Google Analytics</a> 流量检测实时流量报告（就是让你试下准不准确、行不行）</li>
</ol>
<img src="/blog/10730/google-analytics-zhui.png" class="">
<img src="/blog/10730/google-analytics-info.png" class="">
<img src="/blog/10730/google-analytics.png" class="">
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>sitemap</tag>
        <tag>google_site_verification</tag>
      </tags>
  </entry>
  <entry>
    <title>部署博客到 Github Pages</title>
    <url>/blog/51941/</url>
    <content><![CDATA[<p><a href="https://github.com/">GitHub</a> 是通过 Git 进行版本控制的软件源代码托管服务平台，它有很多人性化的功能可以帮助我们管理和追踪代码，把博客部署到 Github 上，最主要的原因就是用它的 <a href="https://pages.github.com/">Github Pages</a> 服务，它可以为我们提供免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名</p>
<p>这里我们不讲如何通过 Github 创建静态网站，只讲如何把本地博客部署到 GitHub 上！</p>
<span id="more"></span>

<p>部署环境及其账户：</p>
<ul>
<li><a href="https://github.com/">注册好的 Github 账户</a></li>
<li><a href="http://nodejs.cn/download/">Node.js</a></li>
<li><a href="https://git-scm.com/downloads">Git</a></li>
<li><a href="https://hexo.io/zh-cn/">Hexo</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装 hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 Terminal 使用命令，在本地创建一个博客目录并进到该目录下</span></span><br><span class="line">mkdir blog &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hexo 和 git 初始化该目录</span></span><br><span class="line">hexo init &amp;&amp; git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接远程仓库（ssh）</span></span><br><span class="line"><span class="comment"># 需要先创建个空白的公开仓库，注意创建时不要选择自动创建 README.md 和 license 等文件</span></span><br><span class="line">git remote add origin git@github.com:xxx/blog.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装部署到 Github 上时所使用的插件</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 gh-pages 分支</span></span><br><span class="line"><span class="comment"># master 分支用作保存源码使用，而 gh-page 则是部署静态代码使用</span></span><br><span class="line"><span class="comment"># 提交后 Github 会默认 gh-pages 为静态网站分支，无须再开启，默认链接是 https://username.github.io/blog</span></span><br><span class="line">git branch gh-pages</span><br><span class="line">git push -u origin gh-pages</span><br></pre></td></tr></table></figure>

<p>配置 hexo 的 _config.yml 文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># 自定义提交信息，可不配置</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">博客更新时间&#123;&#123;</span> <span class="string">now(&#x27;YYYY-MM-DD</span> <span class="string">HH:mm:ss&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">  <span class="comment"># Github 的 ssh 地址及其要部署到哪个分支</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:xxx/blog.git,gh-pages</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，随便书写点内容，执行 <code>hexo g -d</code>，再去 Github 上的仓库内看看 gh-pages 分支是不是已经变成静态内容了</p>
<p><strong>原理：</strong>执行 <code>hexo g -d</code> 操作时会在本地生成 <code>public</code> 静态代码和 <code>.deploy_git</code> 文件夹。<code>.deploy_git</code> 和 <code>public</code> 的内容几乎一致，但 <code>.deploy_git</code> 多了 GitHub 所需的仓库信息与提交信息。<strong>全部解析完后 hexo 会把 <code>.deploy_git</code> 文件夹内的全部内容推送到 GitHub 仓库中，再由 Github Pages 服务完成静态网站的解析</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
        <tag>hexo-deployer-git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 配置进阶</title>
    <url>/blog/49139/</url>
    <content><![CDATA[<p>本博客采用的是 NexT 主题，以下配置结合 hexo 和 NexT 两方面混合讲解。说明：NexT 7.3 配置文件及其目录也发生了很多变化，并且支持了 Pjax。使得我们可以通过启动数据目录来管理配置，升级新的 release 版本更加平滑</p>
<ul>
<li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md">NexT 数据目录官方说明</a></li>
<li><a href="https://tding.top/archives/2bd6d82.html">Hexo-NexT 版本更新记录</a></li>
<li><a href="https://www.imczw.com/post/tech/next_data_file.html">NexT 7.3 数据目录及自定义 CSS 的启用方式</a><span id="more"></span>

</li>
</ul>
<h2 id="语法转义"><a href="#语法转义" class="headerlink" title="语法转义"></a>语法转义</h2><p>特殊符号 &#123;&#123;&#125;&#125; 在 Hexo 内是有特殊含义的语法，在文章中你不能直接使用，需要<a href="https://www.sojson.com/unicode.html">转义字符</a>来代替</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! &amp;<span class="comment">#33;         — 惊叹号 Exclamation mark</span></span><br><span class="line">” &amp;<span class="comment">#34; &amp;quot;  — 双引号 Quotation mark</span></span><br><span class="line"><span class="comment"># &amp;#35;         — 数字标志 Number sign</span></span><br><span class="line">$ &amp;<span class="comment">#36;         — 美元标志 Dollar sign</span></span><br><span class="line">% &amp;<span class="comment">#37;         — 百分号 Percent sign</span></span><br><span class="line">&amp; &amp;<span class="comment">#38; &amp;amp;   — And/Ampersand</span></span><br><span class="line">‘ &amp;<span class="comment">#39;         — 单引号 Apostrophe</span></span><br><span class="line">( &amp;<span class="comment">#40;         — 小括号左边部分 Left parenthesis</span></span><br><span class="line">) &amp;<span class="comment">#41;         — 小括号右边部分 Right parenthesis</span></span><br><span class="line">* &amp;<span class="comment">#42;         — 星号 Asterisk</span></span><br><span class="line">+ &amp;<span class="comment">#43;         — 加号 Plus sign</span></span><br><span class="line">&lt; &amp;<span class="comment">#60; &amp;lt;    — 小于号 Less than</span></span><br><span class="line">= &amp;<span class="comment">#61;         — 等于符号 Equals sign</span></span><br><span class="line">- &amp;<span class="comment">#45; &amp;minus; — 减号</span></span><br><span class="line">&gt; &amp;<span class="comment">#62; &amp;gt;    — 大于号 Greater than</span></span><br><span class="line">? &amp;<span class="comment">#63;         — 问号 Question mark</span></span><br><span class="line">@ &amp;<span class="comment">#64;         — At</span></span><br><span class="line">[ &amp;<span class="comment">#91;         — 中括号左边部分 Left square bracket</span></span><br><span class="line">\ &amp;<span class="comment">#92;         — 反斜杠 Reverse solidus (backslash)</span></span><br><span class="line">] &amp;<span class="comment">#93;         — 中括号右边部分 Right square bracket</span></span><br><span class="line">` &amp;<span class="comment">#96;         - 重音号 backquote/grave accent</span></span><br><span class="line">&#123; &amp;<span class="comment">#123;        — 大括号左边部分 Left curly brace</span></span><br><span class="line">| &amp;<span class="comment">#124;        — 竖线Vertical bar</span></span><br><span class="line">&#125; &amp;<span class="comment">#125;        — 大括号右边部分 Right curly brace</span></span><br></pre></td></tr></table></figure>

<h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 source/_data/next.tml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 开启 tags 和 categories 需要在 source/**/index.md 内设置 type 属性</span></span><br><span class="line">  <span class="comment"># 自定义的页面或类似 about 的页面无须设置</span></span><br><span class="line">  <span class="comment"># 格式：名称：/名称/ || FontAwesome 5+图标</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br></pre></td></tr></table></figure>

<h2 id="自动刷新界面"><a href="#自动刷新界面" class="headerlink" title="自动刷新界面"></a>自动刷新界面</h2><p>在写博客时，我们往往需要手动刷新页面才会看到变化，操作很机械且耗时间。使用 <a href="https://github.com/hexojs/hexo-browsersync">hexo-browsersync</a> 可解决，缺点是网络链接不稳定或者没网的情况下，需要等待四五分钟才会刷新，有时也会出现界面空白现象！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-browsersync</span><br></pre></td></tr></table></figure>

<h2 id="忽略README文件"><a href="#忽略README文件" class="headerlink" title="忽略README文件"></a>忽略README文件</h2><figure class="highlight yml"><figcaption><span>配置 hexo _config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># skip_render 属性可以跳过指定文件的渲染，同时它还支持表达式来匹配路径</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure>

<h2 id="置入本地图片"><a href="#置入本地图片" class="headerlink" title="置入本地图片"></a>置入本地图片</h2><p>Markdown 置入图片的语法是 <code>![img-title](img-url)</code>，但该语法没办法置入本地图片！这时需要使用到 <a href="https://github.com/xcodebuild/hexo-asset-image">hexo-asset-image</a> 插件<span style="color: #999">（注意：1.0.0 版本插入图片时，文章内部的图片可正常显示，在首页时图片显示异常，建议继续使用 hexo 的 <a href="https://hexo.io/zh-cn/docs/asset-folders">asset_img</a> 标签）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 hexo _config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启资源文件管理功能</span></span><br><span class="line"><span class="comment"># 当我们再通过 hexo new [layout] &lt;title&gt; 命令创建新文章时，Hexo 就会自动创建一个跟文章同名的资源文件夹</span></span><br><span class="line"><span class="comment"># 把图片导入到该文件夹后，你就可以按照正常的 Markdown 语法置入图片了</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="插入代码文件"><a href="#插入代码文件" class="headerlink" title="插入代码文件"></a>插入代码文件</h2><p>插入代码文件需要先在 hexo 的 <code>code_dir</code> 模块处配置路径，这里以插入 <code>source/_data/includecode</code> 文件夹内的代码文件为例：<code>code_dir: _data/includecode/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% include_code css lang:css example.css %&#125;</span><br><span class="line">&#123;% include_code css lang:css from:2 to:3 example.css %&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><figcaption><span>css</span><a href="/blog/_data/includecode/example.css">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.terminal</span> {</span><br><span class="line">	<span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">51</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0.4</span>),</span><br><span class="line">               <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><figcaption><span>css</span><a href="/blog/_data/includecode/example.css">view raw</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">51</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0.4</span>),</span><br><span class="line">               <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure>

<p>其它标签请参考：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins">https://hexo.io/zh-cn/docs/tag-plugins</a></li>
<li><a href="https://theme-next.org/docs/tag-plugins/">https://theme-next.org/docs/tag-plugins/</a></li>
</ul>
<h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><p>主要运用到的是 JS 内的 sort 方法。按照如下所示，把方法添加到 <code>node_modules/hexo-generator-index/lib/generator.js</code> 内重启即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">    <span class="keyword">return</span> (a.top == b.top) ? b.date - a.date : b.top - a.top</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="插件实现"><a href="#插件实现" class="headerlink" title="插件实现"></a>插件实现</h3><p>插件实现需要先卸载 <code>hexo-generator-index</code>，然后再安装 <a href=""><code>hexo-generator-index-pin-top</code></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index</span><br><span class="line">npm install hexo-generator-index-pin-top</span><br></pre></td></tr></table></figure>

<h3 id="设置-Front-matter"><a href="#设置-Front-matter" class="headerlink" title="设置 Front-matter"></a>设置 Front-matter</h3><p>上述两种方法任选则其一进行修改即可，修改完成后还需要在你需要置顶的文章内，设置 <code>Front-matter</code> 的属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 置顶单一文章，设置 top: true 即可</span><br><span class="line"># 置顶多篇文章，需要设置 top 的值为数值类型，值越大，文章越靠前</span><br><span class="line">top: 1</span><br></pre></td></tr></table></figure>

<h3 id="设置图标"><a href="#设置图标" class="headerlink" title="设置图标"></a>设置图标</h3><p>置顶的文章如果没有设置图标的话，看着会有点怪，所以这里也设置下。打开 <code>/themes/next/layout/_macro/</code> 目录下的 <code>post.swig</code> 文件，在 <code>&lt;div class=&quot;post-meta&quot;&gt;</code> 的第一个 <code>&lt;span class=&quot;post-time&quot;&gt;</code> 标签下，添加下述代码即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">  &lt;span style=<span class="string">&quot;color: #555&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><figure class="highlight bash"><figcaption><span>hexo-generator-searchdb</span><a href="https://github.com/theme-next/hexo-generator-searchdb">link</a></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 hexo _config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span>           <span class="comment"># 索引文件的路径，相对于站点根目录</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span>                <span class="comment"># 搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span>               <span class="comment"># 限制搜索的条目数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="字数统计及阅读时长"><a href="#字数统计及阅读时长" class="headerlink" title="字数统计及阅读时长"></a>字数统计及阅读时长</h2><figure class="highlight bash"><figcaption><span>hexo-symbols-count-time</span><a href="https://github.com/theme-next/hexo-symbols-count-time">link</a></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 hexo _config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>              <span class="comment"># 文章字数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                 <span class="comment"># 阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>        <span class="comment"># 所有文章总字数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>           <span class="comment"># 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>       <span class="comment"># 在 meta 区域是否换行显示</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>       <span class="comment"># 在文章内部是否显示</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>     <span class="comment"># 博客页面底部是否显示</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span>                     <span class="comment"># 中文推荐，中文～1.5</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure>

<h2 id="访问量统计"><a href="#访问量统计" class="headerlink" title="访问量统计"></a>访问量统计</h2><figure class="highlight yml"><figcaption><span>配置 source/_data/next.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地预览时显示的数量会比较大，不用管</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>               <span class="comment"># 是否开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">false</span>      <span class="comment"># 页面底部是否显示访问人数总数</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>  <span class="comment"># FontAwesome 图标设置</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">false</span>         <span class="comment"># 页面底部是否显示访问总量</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>           <span class="comment"># 文章内部是否显示</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>

<h2 id="配置固定链接"><a href="#配置固定链接" class="headerlink" title="配置固定链接"></a>配置固定链接</h2><figure class="highlight bash"><figcaption><span>hexo-abbrlink</span><a href="https://github.com/rozbo/hexo-abbrlink">link</a></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><figcaption><span>配置 hexo _config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:abbrlink/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>                 <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>                   <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><figure class="highlight bash"><figcaption><span>hexo-blog-encrypt</span><a href="https://github.com/MikeCoder/hexo-blog-encrypt">link</a></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<p>在文章顶部 Front-matter 处设置参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: ****</span><br><span class="line">...</span><br><span class="line">password: ****</span><br><span class="line">abstract: 文章已加密，查看请联系博主！</span><br><span class="line">message: 请输入密码</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="添加Gitalk留言板"><a href="#添加Gitalk留言板" class="headerlink" title="添加Gitalk留言板"></a>添加Gitalk留言板</h2><p>1.在 <a href="https://github.com/"><code>Github</code></a> 上建个空白仓库专门用来存放留言，注意必须仓库是公开的<br>2.在 <code>Setting &gt; Developer setting &gt; OAuth Apps &gt; New OAuth App</code> 处，配置 Github OAuth 第三方验证</p>
<blockquote>
<p>1.Application name 项目名称随意，只要你看到名称知道它是干什么的就可以<br>2.Application description 项目描述<br>3.Homepage URL 和 Authorization callback URL 要填写博客的地址，例如：<a href="https://qlzhu.github.io/blog/">https://qlzhu.github.io/blog/</a></p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意 github_id 和 admin_user 是你账户的名称</span></span><br><span class="line">  <span class="comment"># 如果更改过账户名的话，要用第一次注册时使用的名称</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">&#x27;**&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 刚才注册的空白库名称</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">blog-comments</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置 Github OAuth 第三方验证给出的字符串</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">a***047*60**e</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">4f***2c**a8*cd4**d8*</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">&#x27;**&#x27;</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h2 id="更改server预览端口"><a href="#更改server预览端口" class="headerlink" title="更改server预览端口"></a>更改server预览端口</h2><p><a href="https://hexo.io/zh-cn/docs/server">https://hexo.io/zh-cn/docs/server</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>NexT</tag>
        <tag>hexo</tag>
        <tag>hexo-abbrlink</tag>
        <tag>hexo-generator-searchdb</tag>
        <tag>hexo-symbols-count-time</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeBrew Basic</title>
    <url>/blog/42669/</url>
    <content><![CDATA[<p><a href="https://brew.sh/index_zh-cn">Homebrew</a> 是 Mac 上一款比较出色的软件包管理器，BSD 开源由 Max Howell 开发。类似 Linux 系统的 apt-get、yum。简单来说就是用来管理你软件的！</p>
<p>打开终端执行下述命令，安装Homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>概念词汇</p>
<ul>
<li>formula 安装包的描述文件</li>
<li>cellar  程序安装所在的目录</li>
<li>keg     具体某个包所在的目录，cellar 下的子目录</li>
<li>bottle  预先编译好的包，不需要现场下载编译源码，速度会快很多；官方库中的包大多都是通过 bottle 方式安装</li>
<li>tag     下载源，可以类比于 Linux 下的包管理器 repository</li>
<li>cask    安装 macOS 应用的扩展，你也可以理解为有图形化界面的应用</li>
<li>bundle  描述 Homebrew 依赖的扩展<span id="more"></span>

</li>
</ul>
<p>相关目录</p>
<ul>
<li>/usr/local/Homebrew/：程序自身安装目录</li>
<li>/usr/local/Homebrew/Library/Homebrew/：命令集所在目录</li>
<li>/usr/local/Cellar/：程序安装软件包的路径</li>
</ul>
<h2 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h2><p>安装完成后的第一件事，应该是更改 Homebrew 源，如果没更改的话在国内的使用体验是很差的。这是国内特有的网络状况造成的，同时也给开源项目的分发造成了一定的阻碍。在这种情况下为了我们更好的使用体验，国内的一些组织或者个人就自己新建了很多镜像，例如：</p>
<div class="note ">
            <p>阿里云：<a href="https://mirrors.aliyun.com/homebrew/">https://mirrors.aliyun.com/homebrew/</a><br>中科大：<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn/</a><br>清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/</a></p>
          </div>

<p>当然你能科学上网的话，也可以使用 Homebrew 官方的源（即默认的）。如果你对如何搭建科学上网的工具有兴趣的话，也可参考之前我记录的 <a href="/blog/64387/" title="搭建 VPN 服务">搭建 VPN 服务</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改 Homebrew 的源，需要先进到本地 Homebrew 的仓库内</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line"><span class="comment"># 更改为中科大的源</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew Core</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo homebrew/core)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew Cask，未安装 Cask 的不用此操作</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo homebrew/cask)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Homebrew 默认的源分别是</span></span><br><span class="line"><span class="comment">#https://github.com/Homebrew/brew.git</span></span><br><span class="line"><span class="comment">#https://github.com/Homebrew/homebrew-core</span></span><br><span class="line"><span class="comment">#https://github.com/Homebrew/homebrew-cask</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前源的命令</span></span><br><span class="line">git remote get-url origin</span><br></pre></td></tr></table></figure>

<p>更换 Homebrew Bottles 源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="variable">$SHELL</span> = <span class="string">&quot;/bin/bash&quot;</span>] <span class="comment">#bash</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">  <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="keyword">elif</span> [<span class="variable">$SHELL</span> = <span class="string">&quot;/bin/zsh&quot;</span>] <span class="comment">#zsh</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles/&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line">  <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>使用基础</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew <span class="built_in">help</span> [COMMAND]                      <span class="comment">#帮助</span></span><br><span class="line">man brew</span><br><span class="line">brew commands                            <span class="comment">#列出所有指令</span></span><br><span class="line">brew update                              <span class="comment">#更细自身</span></span><br><span class="line">brew --version                           <span class="comment">#列出当前版本</span></span><br><span class="line">brew config                              <span class="comment">#列出当前配置</span></span><br><span class="line">brew doctor                              <span class="comment">#诊断问题并给出解决方案</span></span><br></pre></td></tr></table></figure>

<p>卸载及安装<br>brew 在安装程序时会先更新自身，可在环境配置文件底部加入 <code>export HOMEBREW_NO_AUTO_UPDATE=true</code><br>以此禁止自动更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew search [FORMULA]                    <span class="comment">#搜索要安装的程序</span></span><br><span class="line">brew install [FORMULA]                   <span class="comment">#安装程序</span></span><br><span class="line">brew install --verbose --debug [FORMULA] <span class="comment">#失败时使用这条指令重新安装，查看错误信息</span></span><br><span class="line">brew reinstall [FORMULA]                 <span class="comment">#重新安装</span></span><br><span class="line">brew uninstall [FORMULA]                 <span class="comment">#卸载</span></span><br><span class="line">brew uninstall --force [FORMULA]         <span class="comment">#强制卸载</span></span><br><span class="line">brew uninstall -f [FORMULA]</span><br><span class="line">brew uninstall --ignore-dependencies [FORMULA]</span><br><span class="line">brew rmtree -f [FORMULA]                 <span class="comment">#卸载时连依赖的包一块卸载</span></span><br></pre></td></tr></table></figure>

<p>查看程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew list                                <span class="comment">#列出所有已安装的程序</span></span><br><span class="line">brew list --version</span><br><span class="line">brew deps --tree --installed             <span class="comment">#列出所有程序的依赖</span></span><br><span class="line">brew deps [FORMULA]                      <span class="comment">#列出程序依赖的软件包</span></span><br><span class="line">brew deps --tree [FORMULA]</span><br><span class="line">brew info [FORMULA]                      <span class="comment">#列出指定程序的详细信息</span></span><br><span class="line">brew home [FORMULA]                      <span class="comment">#访问程序的官网</span></span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew outdated                            <span class="comment">#列出所有可更新的程序</span></span><br><span class="line">brew upgrade                             <span class="comment">#更新所有可更新的程序</span></span><br><span class="line">brew upgrade [FORMULA]                   <span class="comment">#更新指定程序</span></span><br><span class="line"></span><br><span class="line">brew pin [FORMULA]                       <span class="comment">#锁定（禁止更新某个程序）</span></span><br><span class="line">brew unpin [FORMULA]                     <span class="comment">#取消锁定</span></span><br></pre></td></tr></table></figure>

<p>清除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew --cache                             <span class="comment">#查看缓存路径</span></span><br><span class="line">brew cleanup -n                          <span class="comment">#列出可清理的旧程序版本</span></span><br><span class="line">brew cleanup                             <span class="comment">#清除所有可清理的旧版本</span></span><br><span class="line">brew cleanup [FORMULA]                   <span class="comment">#清理指定程序的旧版本</span></span><br></pre></td></tr></table></figure>

<p>仓库<br>可以理解为应用商城 <a href="https://github.com/Homebrew/brew/blob/master/docs/Taps.md">https://github.com/Homebrew/brew/blob/master/docs/Taps.md</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew tap                                 <span class="comment">#列出已配置的仓库</span></span><br><span class="line">brew tap [user/repo] [URL]               <span class="comment">#添加仓库</span></span><br><span class="line">brew tap homebrew/cask-fonts</span><br><span class="line">brew untap user/repo                     <span class="comment">#卸载指定的仓库</span></span><br></pre></td></tr></table></figure>

<p>服务<br>诸如 Nginx、MySQL 等软件，都是有一些服务端软件在后台运行，如果你希望对这些软件进行管理，可以使用 brew services 命令来进行管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services list                      <span class="comment">#列出所有服务</span></span><br><span class="line">brew services run [FORMULA]             <span class="comment">#运行指定服务</span></span><br><span class="line">brew services start [FORMULA]</span><br><span class="line">brew services stop [FORMULA]</span><br><span class="line">brew services restart [FORMULA]</span><br></pre></td></tr></table></figure>

<p>备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew bundle dump                        <span class="comment">#备份安装的所有程序（换电脑时使用）</span></span><br><span class="line">brew bundle                             <span class="comment">#根据备份时生产的Brewfile文件安装所有程序</span></span><br></pre></td></tr></table></figure>

<h2 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h2><h3 id="Homebrew-cask"><a href="#Homebrew-cask" class="headerlink" title="Homebrew cask"></a>Homebrew cask</h3><p>安装 Homebrew 时会自动安装 cask，cask 安装 app 的命令跟 Homebrew 几乎相同。另外你还可以到此网站 <a href="http://macappstore.org/">http://macappstore.org/</a> 查找你要安装 app</p>
<h3 id="Error-Permission-denied-无权限"><a href="#Error-Permission-denied-无权限" class="headerlink" title="Error: Permission denied 无权限"></a>Error: Permission denied 无权限</h3><p>更新时报此错误，说明是权限不够的意思，但是 Homebrew 又不允许在命令前添加 sudo，可使用以下方式解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(brew --prefix)/*</span><br></pre></td></tr></table></figure>

<p>安装时也报权限不够的错误时，请再执行下述命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install &lt;name&gt;</span><br><span class="line">brew link &lt;name&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HomeBrew</category>
      </categories>
      <tags>
        <tag>HomeBrew</tag>
      </tags>
  </entry>
  <entry>
    <title>About Terminal</title>
    <url>/blog/24678/</url>
    <content><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>这里只列出几个常用的，更多请查阅 “帮助 - 终端帮助 - 键盘快捷键”</p>
<ul>
<li><code>⌘Command + N</code>：再打开一个终端</li>
<li><code>⌘Command + T</code>：新建窗口</li>
<li><code>⇧Shift + ⌘Command + K</code>：新建远程连接</li>
<li><code>⌃Control + A</code>：光标移到行开头</li>
<li><code>⌃Control + E</code>：光标移到行结尾</li>
<li><code>⌃Control + U</code>：光标位置删除到行开头</li>
<li><code>⌃Control + K</code>：光标位置删除到行尾</li>
<li><code>⌃Control + W</code>：删除光标位置左侧一个单词</li>
<li><code>⌥option + D</code>：删除光标位置右侧一个单词<span class="text-gray">（终端 - 偏好设置 - 描述文件 - 键盘 - 勾选将option键用作Meta键）</span></li>
<li><code>⌥option + 左箭头</code>：光标前移一个单词</li>
<li><code>⌥option + 右箭头</code>：光标后移一个单词</li>
<li><code>⌘Command + .</code>：中断<span class="text-gray">（跳转到下一行重新开始）</span><span id="more"></span>

</li>
</ul>
<h2 id="定制shell提示符"><a href="#定制shell提示符" class="headerlink" title="定制shell提示符"></a>定制shell提示符</h2><p>我们需要把设置添加到Shell解释器的配置文件内，才可实现定制终端化的目的！bash用户编辑<code>~/.bash_profile</code>文件；zsh编辑<code>~/.zshrc</code>文件；不知道用的是什么解释器的使用<code>echo $SHELL</code>命令进行查看</p>
<p>例如：在<code>~/.zshrc</code>内添加<code>export PS1=“\u@\h\w $ ”</code>，终端提示会变成下面这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Admin@MacBook~Desktop/ $</span><br></pre></td></tr></table></figure>

<p>PS1后的参数，例如：</p>
<ul>
<li>\W：当前工作目录名的最后部分</li>
<li>\w：完整目录名</li>
<li>$：显示”$”字符，超级用户显示一个”#”字符</li>
<li>\l：当前终端设备名</li>
<li>\d：当前日期</li>
<li>\t：当前时间</li>
<li>\h：hostname</li>
</ul>
<p><a href="https://billie66.github.io/TLCL/book/chap14.html">https://billie66.github.io/TLCL/book/chap14.html</a><br><a href="http://bashrcgenerator.com/">http://bashrcgenerator.com/</a><br>emoji表情 <a href="https://emojipedia.org/">https://emojipedia.org/</a></p>
<p>如果你要修改终端内的用户名的话，可使用<code>sudo scutil --set HostName yourname</code></p>
<h2 id="安装Command-line-tools"><a href="#安装Command-line-tools" class="headerlink" title="安装Command line tools"></a>安装Command line tools</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcode-select –install</span><br></pre></td></tr></table></figure>

<p>在弹出的界面点 install 同意即可<span class="text-gray">（经常使用VPN工具的，记得要关闭）</span></p>
<a href="/blog/35871/" title="关于xcode-select –install的解释">关于xcode-select –install的解释</a>

<h2 id="pbcopy-和-pbpaste"><a href="#pbcopy-和-pbpaste" class="headerlink" title="pbcopy 和 pbpaste"></a>pbcopy 和 pbpaste</h2><p>pbcopy 和 pbpaste 可以打通命令行和剪贴板，相当于右键的复制粘贴命令，它们真正发挥威力的地方是将其用作 Unix 工具的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls ~ | pbcopy</span><br><span class="line">pbpaste &gt;&gt; folder_tree.txt</span><br></pre></td></tr></table></figure>

<h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><p>查看上次关机到现在有多长时间</p>
<h2 id="切换shell"><a href="#切换shell" class="headerlink" title="切换shell"></a>切换shell</h2><p><code>cat /etc/shells</code>命令可以查看当前系统可以使用哪些shell<br><code>echo $SHELL</code>命令可以查看我们当前正在使用的shell</p>
<p>切换shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[oh-my-zsh] Insecure completion-dependent directories detected:</span><br><span class="line">drwxrwxr-x  3 qinlzhu  admin  96 11 19 17:38 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">drwxrwxr-x  2 qinlzhu  admin  64 11 19 17:38 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] For safety, we will not load completions from these directories until</span><br><span class="line">[oh-my-zsh] you fix their permissions and ownership and restart zsh.</span><br><span class="line">[oh-my-zsh] See the above list <span class="keyword">for</span> directories with group or other writability.</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] To fix your permissions you can <span class="keyword">do</span> so by disabling</span><br><span class="line">[oh-my-zsh] the write permission of <span class="string">&quot;group&quot;</span> and <span class="string">&quot;others&quot;</span> and making sure that the</span><br><span class="line">[oh-my-zsh] owner of these directories is either root or your current user.</span><br><span class="line">[oh-my-zsh] The following <span class="built_in">command</span> may <span class="built_in">help</span>:</span><br><span class="line">[oh-my-zsh]     compaudit | xargs chmod g-w,o-w</span><br><span class="line"></span><br><span class="line">[oh-my-zsh] If the above didn<span class="string">&#x27;t help or you want to skip the verification of</span></span><br><span class="line"><span class="string">[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to</span></span><br><span class="line"><span class="string">[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</span></span><br></pre></td></tr></table></figure>

<p>按照报错提示在配置文件内设置 <code>ZSH_DISABLE_COMPFIX=true</code> 是无效的！解决方案就是更改目录的权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh</span><br><span class="line">chmod 755 /usr/<span class="built_in">local</span>/share/zsh/site-functions</span><br></pre></td></tr></table></figure>

<h2 id="tab自动补全"><a href="#tab自动补全" class="headerlink" title="tab自动补全"></a>tab自动补全</h2><p>打开Terminal输入<code>nano .inputrc</code>，再输入下述内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> completion-ignore-case on</span><br><span class="line"><span class="built_in">set</span> show-all-if-ambiguous on</span><br><span class="line">TAB: menu-complete</span><br></pre></td></tr></table></figure>

<p>输入后按 <code>⌃Control ＋ o</code> 键，然后关闭、重启</p>
<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换shell解释器为zsh</span></span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure>

<p>完成后重启终端。卸载oh-my-zsh直接在终端执行 <code>uninstall_oh_my_zsh</code> 进行卸载！更改主题可到 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a> 进行查看，然后修改 ~/.zshrc 文件中的 <code>ZSH_THEME=&quot;&quot;</code> 模块，再 source ~/.zshrc 重启下即可完成主题的更改</p>
<p>oh-my-zsh内置了很多Plugins（插件），默认开启的是git，你也可以按照 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</a> 所示开启和查看</p>
<h2 id="关闭崩溃报告"><a href="#关闭崩溃报告" class="headerlink" title="关闭崩溃报告"></a>关闭崩溃报告</h2><p>有时软件崩溃就已经很让人烦心了，重新打开后还弹出问题报告更是烦不胜烦，不过我们可以关闭它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.CrashReporter DialogType none        <span class="comment">#关闭</span></span><br><span class="line">defaults write com.apple.CrashReporter DialogType crashreport <span class="comment">#重新开启</span></span><br></pre></td></tr></table></figure>

<h2 id="强制退出程序"><a href="#强制退出程序" class="headerlink" title="强制退出程序"></a>强制退出程序</h2><p>有时候程序假死了，强行退出<span class="text-gray">（⌥option + 右键程序）</span>也没用，这时可以使用 <code>killall</code> 命令，以微信为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">killall WeChat</span><br></pre></td></tr></table></figure>

<h2 id="程序栏恢复初始状态"><a href="#程序栏恢复初始状态" class="headerlink" title="程序栏恢复初始状态"></a>程序栏恢复初始状态</h2><p>将程序栏恢复为电脑刚刚激活时的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.dock; killall Dock</span><br></pre></td></tr></table></figure>

<p>这些 <code>defaults</code> 开始的指令，实际修改的是系统默认的 Plist 表单，这些表单管理着系统中全部程序的默认设置，上面所做的修改无非是改了某些程序的默认设置罢了。你也可到<code>/Library/Preferences/</code>和<code>/Users/你的用户名/Library/Preferences/</code><span class="text-gray">（按住 ⌥option 点击访达的前往- 资源库）</span>内查看全部的 Plist 表单</p>
<h2 id="文件格式转换"><a href="#文件格式转换" class="headerlink" title="文件格式转换"></a>文件格式转换</h2><p>textutil -convert 命令可在 txt, html, rtf, rtfd, doc, docx, wordml, odt, webarchive 之间来回转换格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">textutil -convert ./a.txt ./b.docx</span><br></pre></td></tr></table></figure>

<p>更多相关指令可查阅我在 <a href="https://github.com/qLzhu/macCommand">Github 上的 MacCommand 仓库</a></p>
<h2 id="远程连接mac"><a href="#远程连接mac" class="headerlink" title="远程连接mac"></a>远程连接mac</h2><p>前提需要先开启 “系统偏好设置 - 共享 - 远程登录”，再把允许访问更改为所有用户，再记住上方给你的IP地址，然后你就可以使用另一台电脑远程ssh连接你的mac啦</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>terminal</tag>
        <tag>bash</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph:Easy绘制ASCII码（字符集）流程图</title>
    <url>/blog/44940/</url>
    <content><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>HomeBrew的使用及其安装，请查阅 <a href="/blog/42669/" title="HomeBrew Basic">HomeBrew Basic</a><br>cpan<span class="label info">(类似npm)</span>是perl的软件包管理器，Mac系统集成了perl无需单独安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install graphviz</span><br><span class="line">cpan</span><br><span class="line"><span class="comment"># cpan shell -- CPAN exploration and modules installation (v2.00)</span></span><br><span class="line"><span class="comment"># Enter &#x27;h&#x27; for help.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cpan[1]&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cpan 时一路 Next 安装就行</span></span><br><span class="line"><span class="comment"># 直到终端出现 cpan[1]&gt; 字样，输入 exit 退出，再执行下述命令</span></span><br><span class="line"></span><br><span class="line">sudo cpan Graph:Easy</span><br><span class="line"><span class="comment"># 问题：</span></span><br><span class="line"><span class="comment"># 初次 sudo cpan Graph:Easy 时未能成功</span></span><br><span class="line"><span class="comment"># 后来开启了 VPN 才安装了下来，大家可以试试，也有可能是我网络的问题</span></span><br><span class="line"></span><br><span class="line">graph-easy --version</span><br><span class="line"><span class="comment"># Graph::Easy v0.76  (c) by Tels 2004-2008.  Released under the GPL 2.0 or later.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Running under Perl v5.018004.</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h2><p>节点就是你要输出的某个单词，节点分为单节点和复合节点</p>
<ol>
<li>单节点 [xx]</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[ShangHai]&quot;</span> | graph-easy</span><br><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai]&quot;</span>     <span class="comment">#终端输出的另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+</span><br><span class="line">| ShangHai |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>复合节点 [xx | xx | xx]</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai | ShenZhen | BeiJing]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+----------+---------+</span><br><span class="line">| ShangHai | ShenZhen | BeiJing |</span><br><span class="line">+----------+----------+---------+</span><br><span class="line"></span><br><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai | ShenZhen | BeiJing || China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># || 节点换行</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+----------+---------+</span><br><span class="line">| ShangHai | ShenZhen | BeiJing |</span><br><span class="line">+----------+----------+---------+</span><br><span class="line">|  China   |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>节点内的文本换行和对其</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai ShenZhen\n\l Beijing\c LangFang\r QingHai]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \n 后面出现的文字开始换行</span></span><br><span class="line"><span class="comment"># \l 左对齐、\c 居中对齐、\r 右对齐，分别对应的单词是lefr\center\right</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+-------------------+</span><br><span class="line">| ShangHai ShenZhen |</span><br><span class="line">|                   |</span><br><span class="line">| Beijing           |</span><br><span class="line">|     LangFang      |</span><br><span class="line">|           QingHai |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure>

<p>连接线，设置节点之间使用连接使用什么样式的线条</p>
<ol>
<li>无方向连接线，必须使用两个中划线 <span class="label info">(--)</span></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] -- [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+     +-------+</span><br><span class="line">| ShangHai | --- | China |</span><br><span class="line">+----------+     +-------+</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实线方向箭<span class="label info">(->)</span></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] -&gt; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+     +-------+</span><br><span class="line">| ShangHai | --&gt; | China |</span><br><span class="line">+----------+     +-------+</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>双向箭<span class="label info">(<->)</span></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] &lt;-&gt; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+      +-------+</span><br><span class="line">| ShangHai | &lt;--&gt; | China |</span><br><span class="line">+----------+      +-------+</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>双实线<span class="label info">(=>)</span></li>
<li>点线<span class="label info">(.>)</span></li>
<li>波浪线<span class="label info">(~>)</span></li>
<li>虚线<span class="label info">(- >)</span></li>
<li>点虚线<span class="label info">(.- >)</span></li>
<li>点点虚线<span class="label info">(.- >)</span></li>
<li>. - = ~可自由组合</li>
</ol>
<p>回指</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] -&gt; [China] -&gt; [ShangHai]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">  +----------------+</span><br><span class="line">  v                |</span><br><span class="line">+----------+     +-------+</span><br><span class="line">| ShangHai | --&gt; | China |</span><br><span class="line">+----------+     +-------+</span><br><span class="line"></span><br><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] -&gt; [ShangHai]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">  +------+</span><br><span class="line">  v      |</span><br><span class="line">+----------+</span><br><span class="line">| ShangHai |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<p>多指</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai],[ShenZhen],[BeiJing] -&gt; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+---------+     +----------+     +----------+</span><br><span class="line">| BeiJing | --&gt; |  China   | &lt;-- | ShenZhen |</span><br><span class="line">+---------+     +----------+     +----------+</span><br><span class="line">                  ^</span><br><span class="line">                  |</span><br><span class="line">                  |</span><br><span class="line">                +----------+</span><br><span class="line">                | ShangHai |</span><br><span class="line">                +----------+</span><br></pre></td></tr></table></figure>

<p>css样式设置边框线<span class="label info">（其它css基础样式也行，样式必须放置在花括号内）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># easy_ascii.txt</span></span><br><span class="line">[ShangHai] - message -&gt; [China]&#123;border:1px solid red&#125;</span><br><span class="line">[ShangHai] - message -&gt; [China]&#123;border:none&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线的粗细及其颜色，只有在输出成html时才会有效</span></span><br><span class="line"><span class="comment"># graph-easy easy_ascii.txt --output=index.html</span></span><br></pre></td></tr></table></figure>

<p>群组线框<span class="label info">（()小括号扩起来）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;(group: [TongZhou] -&gt; [BeiJing]) [BeiJing] -&gt; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+ - - - - - - - - - - - - - - -+</span><br><span class="line"><span class="string">&#x27; group:                       &#x27;</span></span><br><span class="line"><span class="string">&#x27;                              &#x27;</span></span><br><span class="line"><span class="string">&#x27; +----------+     +---------+ &#x27;</span>     +-------+</span><br><span class="line"><span class="string">&#x27; | TongZhou | --&gt; | BeiJing | &#x27;</span> --&gt; | China |</span><br><span class="line"><span class="string">&#x27; +----------+     +---------+ &#x27;</span>     +-------+</span><br><span class="line"><span class="string">&#x27;                              &#x27;</span></span><br><span class="line">+ - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>

<p>注释</p>
<ol>
<li>在生成ASCII码的源文件中注释使用#号加空格的方式</li>
<li>连接线注解，节点连线之间的说明<span class="label info">(- 文字说明 ->)</span><span class="label danger">【注释两侧是有空格的，且注释文本是中文的话会乱】</span></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] - message -&gt; [China]&quot;</span></span><br><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai] --&gt; &#123;label: &quot;</span>message<span class="string">&quot;&#125; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+  message   +-------+</span><br><span class="line">| ShangHai | ---------&gt; | China |</span><br><span class="line">+----------+            +-------+</span><br></pre></td></tr></table></figure>

<p>连接方向</p>
<ol>
<li>通过<span class="label info">{flow:down}</span>键值对设置<br>值有 west | left、east | right、north | up、south | down，可理解为地图的上北下南左西右东</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy &lt;&lt;&lt; <span class="string">&quot;[ShangHai]&#123;flow:down&#125; - message -&gt; [China]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">+----------+</span><br><span class="line">| ShangHai |</span><br><span class="line">+----------+</span><br><span class="line">  |</span><br><span class="line">  | message</span><br><span class="line">  v</span><br><span class="line">+----------+</span><br><span class="line">|  China   |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure>

<h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>除了上述示例中直接在终端输出外，Graph:Easy 还支持多格式的文件输出</p>
<ol>
<li>--input= 指定源文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy --input=example.txt</span><br><span class="line">graph-easy example.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>--output= 设置输出文件名及其格式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy example.txt --output=index.html</span><br><span class="line">graph-easy example.txt index.html</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>--xx 输出文件未设置格式时可使用此方法指定文件的格式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">graph-easy example.txt index --html</span><br></pre></td></tr></table></figure>

<p>更多信息请查阅 <a href="http://bloodgate.com/perl/graph/manual/overview.html">Graph:Easy</a></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>ASCII码</tag>
        <tag>Graph Easy</tag>
        <tag>http://asciiflow.com/</tag>
        <tag>https://metacpan.org/pod/distribution/Graph-Easy/bin/graph-easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Line too long in config file</title>
    <url>/blog/29248/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Line too long <span class="keyword">in</span> config file</span><br><span class="line">unable to make sense of the file /private/etc/man.conf</span><br></pre></td></tr></table></figure>

<p>打开终端报上述信息！解决该问题只需在 /etc/man.conf 文件末尾加一行空白即可</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>man</tag>
        <tag>Line too long in config file</tag>
        <tag>unable to make sense of the file /private/etc/man.conf</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac启动WEB服务的方法</title>
    <url>/blog/3450/</url>
    <content><![CDATA[<p>MAC默认集成了Python2<span class="text-gray">（使用python3需要升级）</span>和PHP的开发环境，所以启动WEB服务时无需单独安装。命令方式进到要开启服务的目录，再使用对应的命令开启。访问时在浏览器地址栏中输入 <a href="https://localhost:8000">https://localhost:8000</a> ，共享给同事时localhost改成你的IP即可</p>
<p>Python方式启动WEB服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8000</span><br><span class="line">python3 -m http.server --cgi 8000</span><br></pre></td></tr></table></figure>

<p>PHP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -S localhost:8000</span><br></pre></td></tr></table></figure>

<p>Serve需要使用NPM安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g serve</span><br><span class="line"></span><br><span class="line"># 启动 web 服务命令，无需写端口号</span><br><span class="line"># 默认 5000 端口</span><br><span class="line">serve</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>web server</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH Connection closed</title>
    <url>/blog/11331/</url>
    <content><![CDATA[<p>Mac终端连接远程服务器时，报 <code>Connection closed by 207.***.8*.** port 22</code> 错误！原因是服务器账户的密码换了，链接时匹配本地的 ECDSA，未匹配正确，所以服务器拒绝建立连接</p>
<p>ssh-keygen 命令删除指定密钥，再重新连接输入密码即可解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意把 YourName 换成你的电脑的用户名</span></span><br><span class="line"><span class="comment"># 服务的 207.***.8*.** IP 也需要换成你的</span></span><br><span class="line">ssh-keygen -f <span class="string">&quot;/users/YourName/.ssh/known_hosts&quot;</span> -R 207.***.8*.**</span><br></pre></td></tr></table></figure>

<p>当然你还可以手动删除 <code>known_hosts</code> 文件内的密钥，在你的根目录下找到 <code>.ssh/known_hosts</code>（<span style="color: #999">显示隐藏文件快捷键Command + shift + .</span>） ，删除 <code>207.***.8*.**</code> 开头的一行，然后保存退出！</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>ssh Connection closed</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 卸载 App 残留、Node 和 NPM</title>
    <url>/blog/21969/</url>
    <content><![CDATA[<p>Mac上我们不借助第三方应用删除App的话，通常是直接移除到垃圾篓，或者按住<code>⌥option</code>删除<span class="text-gray">（App Store 下载的 App）</span>，时间长了系统会帮我们自动清理一些App残留。但是有些文件系统是不删除的，这时我们可以借助<code>mdfind</code>命令进行查询下跟App有关的文件，例如我们删除CleanMyMac</p>
<div class="note ">
            <p>mdfind 其实就是 Mac 的 Spotlight。如果你的 Spotlight 的工作不正确，也可以 <code>mdutil -E</code> 强制重建索引数据库</p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mdfind -name CleanMyMac</span><br><span class="line"></span><br><span class="line"><span class="comment"># /Applications/CleanMyMac X.app</span></span><br><span class="line"><span class="comment"># /Library/LaunchDaemons/com.macpaw.zh.CleanMyMac4.Agent.plist</span></span><br><span class="line"><span class="comment"># /Library/LaunchDaemons/com.macpaw.CleanMyMac4.Agent.plist</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令删除时注意要转义下空格</span></span><br><span class="line">rm -rf /Applications/CleanMyMac\ X.app</span><br></pre></td></tr></table></figure>

<p>还可以使用 -onlyin 参数，指定搜索的目录。例如：<code>mdfind -onlyin ~/downloads CleanMyMac</code></p>
<span id="more"></span>

<h2 id="Uninstall-Node-PKG"><a href="#Uninstall-Node-PKG" class="headerlink" title="Uninstall Node PKG"></a>Uninstall Node PKG</h2><p>卸载从官网下载的安装，使用如下命令。如果未正常卸载的使用<code>which</code>命令查看下，安装的位置是不是自己更改了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Install-NVM"><a href="#Install-NVM" class="headerlink" title="Install NVM"></a>Install NVM</h2><p>这里再说下 <a href="https://nodejs.org/en/">Node</a> 版本管理的问题！当你开发项目时，该项目对 Node 的版本有要求，且跟你安装的版本不同（过高和者低了），这时你怎么办？卸载当前版本再安装项目所需的版本？如果多个项目每个项目要求的版本都不同那，总不能每个项目都是卸载再安装吧，那多麻烦！所以我们可以借助 <a href="https://github.com/nvm-sh/nvm">nvm</a> 管理 Node。通过 <a href="https://brew.sh/index_zh-cn">HomeBrew</a> 安装 nvm，然后再通过 nvm 安装 Node，这样一级管理一级，方便卸载和安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已安装HomeBrew的请跳过</span></span><br><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>

<p>安装完成后还不能直接使用，因为通过 HomeBrew 安装的 nvm，<a href="https://stackoverflow.com/questions/27651892/homebrew-installs-nvm-but-nvm-cant-be-found-afterwards">缺少 nvm.sh</a> 执行脚本文件，执行时总会报 <code>command not found: nvm</code> 错误，所以需要在 <code>~/.bash_profile</code>、<code>~/.bashrc</code> 或 <code>~/.zshrc</code> 添加如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># MacOS Big Sur 版本请添加</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，<code>source</code>命令重启下相应的配置文件</p>
<h2 id="Install-Node"><a href="#Install-Node" class="headerlink" title="Install Node"></a>Install Node</h2><p>上述步骤都设置好后，我们就可以使用nvm安装Node了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install stable       <span class="comment">#安装最新的稳定版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default stable <span class="comment">#将此版本设置为默认版本</span></span><br></pre></td></tr></table></figure>

<h2 id="nvm-basic-commands"><a href="#nvm-basic-commands" class="headerlink" title="nvm basic commands"></a>nvm basic commands</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm --<span class="built_in">help</span>                  显示命令行帮助信息</span><br><span class="line">nvm --version               打印输出已安装的nvm版本号</span><br><span class="line"></span><br><span class="line">nvm ls-remote               列出远程仓库内所有可安装的版本</span><br><span class="line">nvm install &lt;version&gt;       安装指定的版本</span><br><span class="line">nvm reinstall-packages      重新安装当前版本的Node</span><br><span class="line">nvm ls                      列出所有安装的Node版本</span><br><span class="line">nvm uninstall &lt;version&gt;     卸载指定的版本</span><br><span class="line"></span><br><span class="line">nvm current                 显示当前的Node版本</span><br><span class="line">nvm use &lt;version&gt;           切换指定版本</span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">alias</span> &lt;name&gt; &lt;version&gt;  给不同的版本号添加别名</span><br><span class="line">nvm <span class="built_in">unalias</span> &lt;name&gt;          删除已定义的别名</span><br><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt; 设置默认 node 版本</span><br><span class="line"><span class="comment"># nvm 默认是不能删除被设定为 default 版本的 node</span></span><br><span class="line"><span class="comment"># 特别是只安装了一个 node 的时候，这个时候我们需要先解除当前版本绑定，然后再使用 nvm uninstall 删除</span></span><br><span class="line">nvm deactivate              解除当前版本绑定</span><br><span class="line"></span><br><span class="line">nvm cache dir               显示nvm的缓存目录</span><br><span class="line">nvm cache clear             清楚nvm的缓存目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阅读拓展</span></span><br><span class="line"><span class="comment"># https://github.com/nvm-sh/nvm</span></span><br><span class="line"><span class="comment"># http://www.srcmini.com/1433.html</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>mdfind</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode显示GIT隐藏目录</title>
    <url>/blog/13726/</url>
    <content><![CDATA[<p>快捷键 <code>⌘command + ,</code> 打开VSCode的设置界面，在 “文本编辑器 - 文件 - Exclude” 处删除 “**/.git”。想隐藏文件或者目录的话，也可在这按照 glob 模式排除</p>
<img src="/blog/13726/show_git.png" class="" title="删除**&#x2F;.git">
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>.git</tag>
        <tag>exclude .git</tag>
      </tags>
  </entry>
  <entry>
    <title>xcode-select --install</title>
    <url>/blog/35871/</url>
    <content><![CDATA[<p>如果你是程序猿并且使用的是 Mac 的话，肯定避免不了要安装 Xcode，因为它内置了很多开发必须的环境，在最新的版本中 Xcode 默认不再集成 <code>Xcode command line tools</code>。如果你不是一名 iOS 或 OS X 开发者，可以跳过 XCode（软件太大了近10G）直接安装 <code>Xcode command line tools</code> 了</p>
<p>Install 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure>

<p>如果 Install 不了，可直接到 <a href="https://developer.apple.com/download/more/"><code>Developer Apple</code></a> 内下载相应的包</p>
<p>如果你想了解 <code>Xcode command line tools</code> 包含多少可用的命令，可以到 <code>/Library/Developer/CommandLineTools/</code> 查看，另外如果你想卸载的话直接删除该目录即可</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mac-xcode-select --install</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 配置 VSCode Remote-SSH</title>
    <url>/blog/15892/</url>
    <content><![CDATA[<p>微软2019年05月03日，在PyCon 2019大会上推出了三个非常实用的功能性插件。它们可以帮助开发者在容器、物理机器或虚拟机，以及Windows Subsystem for Linux (WSL)中实现无缝的远程开发</p>
<ul>
<li><code>Remote-SSH</code>：连接虚拟/实体Linux主机</li>
<li><code>Remote-Containers</code>：连接开发容器（例如：Docker）</li>
<li><code>Remote-WSL</code>：连接WSL（也就是Linux子系统）</li>
</ul>
<p>所以推出这个三个插件的重点在于服务使用Windows系统但有Linux开发需求的用户群体</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章只介绍<code>Remote-SSH</code>的配置与使用，因为<code>Remote-Containers</code>和<code>Remote-WSL</code>我还未使用到，所以想了解它们的朋友可以参考<a href="https://code.visualstudio.com/docs/remote/remote-overview">VSCode官网</a>给出的详情文档，也可以自动百度或者谷歌相关文章！以下是测试环境和工具</p>
<ul>
<li>MacOS</li>
<li>VSCode</li>
<li>远程主机：CentOS Linux release 7.4.1708 (Core)</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开VSCode软件，点击最左侧活动栏内的 <strong>“扩展”</strong> 小图标，然后搜索 <strong><code>Remote SSH</code></strong> 并安装即可。安装完成后在 <strong>“扩展”</strong> 的下方会多出一个类似电脑屏幕的小图标</p>
<img src="/blog/15892/install.png" class="" title="Install Remote SSH 界面">

<h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><h3 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h3><p>使用<a href="http://man.linuxde.net/ssh-keygen">ssh-keygen</a>命令创建的密钥，会在本地<code>~/.ssh/</code>的目录内生成两个文件<code>id_rsa-remote-ssh</code>和<code>id_rsa-remote-ssh.pub</code>，我们要部署的是<code>id_rsa-remote-ssh.pub</code>公钥内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa-remote-ssh</span><br></pre></td></tr></table></figure>

<div class="note ">
            <p>参数说明<br>-t 指定要创建的类型<br>-b 密钥长度<br>-f 指定用来保存密钥的文件名<br>id_rsa-remote-ssh 名字可以随意定义</p>
          </div>

<h2 id="上传公钥到远程服务器"><a href="#上传公钥到远程服务器" class="headerlink" title="上传公钥到远程服务器"></a>上传公钥到远程服务器</h2><ol>
<li>mac拷贝公钥命令 <code>pbcopy &lt; ~/.ssh/id_rsa-remote-ssh.pub</code></li>
<li>ssh登陆远程服务器</li>
<li>创建 authorized_keys 文件，并把刚才使用pbcopy命令拷贝的公钥内容，粘贴到此文件内保存</li>
<li>去除 /etc/ssh/sshd_config 内 <code>PubkeyAuthentication</code> 前的 # 号</li>
<li><code>systemctl restart sshd.service</code> 重启远程服务器的ssh服务</li>
</ol>
<h2 id="配置Remote-SSH插件"><a href="#配置Remote-SSH插件" class="headerlink" title="配置Remote-SSH插件"></a>配置Remote-SSH插件</h2><p>按照图片所示，在用户级目录下的 .ssh 内创建一个配置文件（即/Users/your-host-name/.ssh/config），并在该文件内填写相应内容</p>
<img src="/blog/15892/Remote-SSH-config.png" class="" title="创建配置文件 Config 图片">
<img src="/blog/15892/example-config.png" class="" title="配置 config 图片">

<p>如果你想连接多台远程服务器，继续在后面追加配置内容即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host xxx                             <span class="comment"># xxx 自定义连接名称</span></span><br><span class="line">    User root                        <span class="comment"># root 远程服务器账户名称</span></span><br><span class="line">    HostName 47.92.xxx.18x           <span class="comment"># 47.92.xxx.18x 远程服务器地址</span></span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_xxxx  <span class="comment"># ~/.ssh/id_rsa_xxxx 本地密钥所在位置</span></span><br></pre></td></tr></table></figure>

<h2 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h2><p>在VSCode左侧 “CONNECTIONS” 下找到你刚才创建的服务器名称，然后右键选择打开的方式</p>
<div class="note ">
            <p>Connect to Host in Current Window 在当前窗口中连接到主机<br>Connect to Host in New Window 在新窗口中连接到主机</p>
          </div>

<img src="/blog/15892/new-window.png" class="" title="创建配置文件 Config 图片">
<img src="/blog/15892/succeed_.png" class="" title="配置 config 图片">

<p>打开任意文件编辑后保存，它就会自动保存到远程服务器了(^_^)</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>remote-ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM Cannot Find Module</title>
    <url>/blog/21517/</url>
    <content><![CDATA[<p>执行 <code>npm install</code> 时终端提示 Cannot find module ‘../lib/utils/unsupported.js’ 错误，解决方案就是删除 /usr/local/lib/node_modules/npm 目录！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules/npm</span><br><span class="line"></span><br><span class="line">brew reinstall node</span><br><span class="line">nvm reinstall-packages <span class="comment">#使用nvm管理Node的使用此命令</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>Cannot find module</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM EAUDITNOPJSON 错误</title>
    <url>/blog/2777/</url>
    <content><![CDATA[<p>执行 <code>npm audit fix</code> 时报npm ERR! code EAUDITNOPJSON错误，这是因为项目下没有package.json文件造成的，执行 <code>npm init -y</code> 即可解决！ <a href="https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities">https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities</a></p>
<p>如果你还报EAUDITNOLOCK错误的话，请执行 <code>npm i --package-lock-only</code></p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>EAUDITNOPJSON</tag>
        <tag>EAUDITNOLOCK</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM Basic</title>
    <url>/blog/27424/</url>
    <content><![CDATA[<p>在使用npm之前，须先安装 <a href="https://nodejs.org/en/download/">Node.js</a>，因为npm是随Node一起发布的，所以推荐安装 LTS 版的稳定版本。如果网速比较慢的话，推荐到 <a href="https://npm.taobao.org/mirrors/node">TaoBao Node.js</a> 镜像下载。建议大家使用nvm进行安装，不推荐直接下载程序包进行安装，原因请查阅 <a href="/blog/21969/" title="Mac 卸载 App 残留、Node 和 NPM">Mac 卸载 App 残留、Node 和 NPM</a></p>
<p>Node.js安装完成后，可通过相关命令查看安装位置及其版本，以此来检测是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> node     <span class="comment">#/usr/local/bin/node</span></span><br><span class="line">node --version <span class="comment">#v12.14.1</span></span><br><span class="line">npm --version  <span class="comment">#6.13.4</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>由于npm的更新频率比Node.js多，所以通过上面的命令安装的npm可能不是最新版本，可以通过下面的命令单独更新npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install npm@latest -g</span><br></pre></td></tr></table></figure>

<h2 id="配置基本信息"><a href="#配置基本信息" class="headerlink" title="配置基本信息"></a>配置基本信息</h2><p>执行 <code>npm init</code> 时会用到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init.author.email <span class="string">&quot;qinlzhu@outlook.com&quot;</span></span><br><span class="line">npm <span class="built_in">set</span> init.author.name <span class="string">&quot;qinlzhu&quot;</span></span><br><span class="line">npm <span class="built_in">set</span> init.license <span class="string">&quot;MIT&quot;</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>npm config</code> 命令可查看npm的相关配置，也可根据自己的需求自定义配置，在不同的环境下执行不同的配置文件，配置加载优先级如下(从高到低)</p>
<ol>
<li>命令行参数、环境变量、npmrc 文件</li>
<li>npmrc 文件（项目级、用户级~/.npmrc、系统级、npm 内置级）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config list</span><br><span class="line"><span class="comment"># ; cli configs</span></span><br><span class="line"><span class="comment"># metrics-registry = &quot;https://registry.npmjs.org/&quot;</span></span><br><span class="line"><span class="comment"># scope = &quot;&quot;</span></span><br><span class="line"><span class="comment"># user-agent = &quot;npm/6.13.4 node/v12.14.1 darwin x64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ; userconfig /Users/leizhu/.npmrc</span></span><br><span class="line"><span class="comment"># home = &quot;https://npm.taobao.org&quot;</span></span><br><span class="line"><span class="comment"># init-author-email = &quot;qinlzhu@outlook.com&quot;</span></span><br><span class="line"><span class="comment"># init-author-name = &quot;qinlzhu&quot;</span></span><br><span class="line"><span class="comment"># init-license = &quot;MIT&quot;</span></span><br><span class="line"><span class="comment"># registry = &quot;https://registry.npmjs.org/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ; node bin location = /usr/local/bin/node</span></span><br><span class="line"><span class="comment"># ; cwd = /Users/leizhu/Downloads/Code/github/blog/example/class</span></span><br><span class="line"><span class="comment"># ; HOME = /Users/leizhu</span></span><br><span class="line"><span class="comment"># ; &quot;npm config ls -l&quot; to show all defaults.</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-npm-源"><a href="#配置-npm-源" class="headerlink" title="配置 npm 源"></a>配置 npm 源</h2><p>我们使用默认配置从npm官网下载模块时，由于网络的因素，会导致我们的下载速度特别慢。所以我们可以配置一些国内的镜像来加快我们的下载速度。这里以淘宝的npm镜像为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时使用</span></span><br><span class="line">npm install express --registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局使用</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="更改安装目录"><a href="#更改安装目录" class="headerlink" title="更改安装目录"></a>更改安装目录</h2><p>更改目录后需要重新安装npm，然后再更改环境变量。即在 <code>.profile</code>、<code>.bash_profile(Mac)</code> 或 <code>.bashrc</code> 文件内最后一行添加 <code>export PATH=&quot;$HOME/Folder-Name/bin:$PATH&quot;</code>，最后再重启下文件即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取全局安装位置</span></span><br><span class="line">npm config get prefix <span class="comment">#/usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改安装位置(path_url换成你要安装的位置)</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix=<span class="variable">$HOME</span>/path_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新下载npm并重启配置文件</span></span><br><span class="line">npm install npm -g</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>使用npm安装软件包之前，需要先初始化本地目录。命令执行后会在工程根目录下，生成如下文件及其目录</p>
<div class="note ">
            <p>node_modules：保存软件包的文件夹<br>package.json：软件包管理文件<br>package-lock.json：软件包各种依赖关系管理文件</p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回车后，它会询问一些关于包的基本信息，根据实际情况回答即可</span></span><br><span class="line"><span class="comment"># 如果不喜欢这种方式，可以使用 `npm init --yes` 或 `npm init -y` 命令</span></span><br><span class="line"><span class="comment"># 直接使用默认的配置来创建 package.json 文件</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># package name: (npms)     项目名称</span></span><br><span class="line"><span class="comment"># version: (1.0.0)         版本信息</span></span><br><span class="line"><span class="comment"># description:             项目简单描述，如果为空，</span></span><br><span class="line"><span class="comment">#                          读取当前目录的 READMD.md 或 README 文件第一行内容作为它的默认值</span></span><br><span class="line"><span class="comment"># entry point: (index.js)  入口文件</span></span><br><span class="line"><span class="comment"># test command:            test脚本</span></span><br><span class="line"><span class="comment"># git repository:          项目地址</span></span><br><span class="line"><span class="comment"># keywords:                项目关键词</span></span><br><span class="line"><span class="comment"># license: (MIT)           项目许可协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># package.json</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   &quot;name&quot;: &quot;npms&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;version&quot;: &quot;1.0.0&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;main&quot;: &quot;index.js&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;dependencies&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;lodash&quot;: &quot;^4.17.15&quot;</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   &quot;devDependencies&quot;: &#123;&#125;,</span></span><br><span class="line"><span class="comment">#   &quot;scripts&quot;: &#123;</span></span><br><span class="line"><span class="comment">#     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="comment">#   &#125;,</span></span><br><span class="line"><span class="comment">#   &quot;author&quot;: &quot;qinlzhu &lt;qinlzhu@outlook.com&gt;&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;license&quot;: &quot;MIT&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索安装包"><a href="#搜索安装包" class="headerlink" title="搜索安装包"></a>搜索安装包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm search Loadsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># NAME                   | DESCRIPTION         | AUTHOR          | DATE       | VERSION  | KEYWORDS</span></span><br><span class="line"><span class="comment"># loadsh                 | Lodash modular…     | =atool          | 2019-03-12 | 0.0.4    | modules stdlib util</span></span><br><span class="line"><span class="comment"># loadsh-get             | 访问嵌套对象         | =allen(lisong)  | 2020-02-01 | 1.0.1    | lodash get</span></span><br><span class="line"><span class="comment"># eskom-loadshedding-api | Exposing the Eskom… | =polarizedions  | 2020-01-09 | 0.1.4    | eskom loadshedding api</span></span><br><span class="line"><span class="comment"># madoka                 | A json generator    | =allenice       | 2016-02-17 | 1.1.2    | json generator faker ohana loadsh</span></span><br><span class="line"><span class="comment"># e-loadsh               | 前端常用函数工具库    | =alexjia        | 2019-09-30 | 1.0.3    | javascript util</span></span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令格式</span></span><br><span class="line">npm install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line"><span class="comment"># 生产环境下安装依赖的软件包，默认自带 --save-prod 参数</span></span><br><span class="line">npm install Lodash</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm i Lodash</span><br><span class="line">npm install Lodash --save</span><br><span class="line">npm install Lodash --save-prod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试或开发环境下安装依赖的软件包</span></span><br><span class="line"><span class="comment"># 保存在 package.json 的 devDependencies 下</span></span><br><span class="line">npm install Lodash --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件包的指定版本</span></span><br><span class="line">npm install Lodash@4.17.00</span><br><span class="line">npm install Lodash@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install Lodash --global</span><br><span class="line">npm i Loadsh -g</span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测更新</span></span><br><span class="line">npm outdated</span><br><span class="line">npm outdated -g --depth=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">npm update</span><br><span class="line">npm update Loadsh</span><br></pre></td></tr></table></figure>

<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 node_modules 目录内的包</span></span><br><span class="line">npm uninstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 package.json dependencies 选项下的包必须使用该命令</span></span><br><span class="line">npm uninstall --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># package.json devDependencies</span></span><br><span class="line">npm uninstall --save-dev</span><br></pre></td></tr></table></figure>

<h2 id="枚列"><a href="#枚列" class="headerlink" title="枚列"></a>枚列</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm list --global</span><br><span class="line"><span class="comment"># /usr/local/lib</span></span><br><span class="line"><span class="comment"># ├─┬ cnpm@6.1.1</span></span><br><span class="line"><span class="comment"># │ ├─┬ commander@2.10.0</span></span><br><span class="line"><span class="comment"># │ │ └── graceful-readlink@1.0.1</span></span><br><span class="line"><span class="comment"># │ ├─┬ cross-spawn@0.2.9</span></span><br><span class="line"><span class="comment"># │ │ └── lru-cache@2.7.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 --depth=“n” 参数来指定递归的深度</span></span><br><span class="line">npm list -g --depth=1</span><br><span class="line"><span class="comment"># ├─┬ cnpm@6.1.1</span></span><br><span class="line"><span class="comment"># │ ├── commander@2.10.0</span></span><br><span class="line"><span class="comment"># │ ├── cross-spawn@0.2.9</span></span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>每当你通过npm安装一个软件包时，npm会自动在你系统用户根目录下创建一个副本，并保存到 <code>.npm</code> 目录内，之所以你安装相同的软件包时，速度会更快，那是因为它不需要再访问网络安装了，所以我们需要定期清理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls ~/.npm</span><br><span class="line"></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>

<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>执行 npm install 安装插件时报下述错误！这是 npm 对 node_modules 没有读写的权限造成的，执行时只需在开头添加 sudo 命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! syscall access</span><br><span class="line">npm ERR! path /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! Error: EACCES: permission denied, access <span class="string">&#x27;/usr/local/lib/node_modules&#x27;</span></span><br><span class="line">npm ERR!  [Error: EACCES: permission denied, access <span class="string">&#x27;/usr/local/lib/node_modules&#x27;</span>] &#123;</span><br><span class="line">npm ERR!   errno: -13,</span><br><span class="line">npm ERR!   code: <span class="string">&#x27;EACCES&#x27;</span>,</span><br><span class="line">npm ERR!   syscall: <span class="string">&#x27;access&#x27;</span>,</span><br><span class="line">npm ERR!   path: <span class="string">&#x27;/usr/local/lib/node_modules&#x27;</span></span><br><span class="line">npm ERR! &#125;</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! The operation was rejected by your operating system.</span><br><span class="line">npm ERR! It is likely you <span class="keyword">do</span> not have the permissions to access this file as the current user</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! If you believe this might be a permissions issue, please double-check the</span><br><span class="line">npm ERR! permissions of the file and its containing directories, or try running</span><br><span class="line">npm ERR! the <span class="built_in">command</span> again as root/Administrator.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/**/.npm/_logs/2020-11-20T05_26_26_608Z-debug.log</span><br></pre></td></tr></table></figure>

<p><a href="https://npm.comptechs.cn/">https://npm.comptechs.cn/</a><br><a href="http://caibaojian.com/npm/">http://caibaojian.com/npm/</a><br><a href="https://cloud.tencent.com/developer/doc/1282">https://cloud.tencent.com/developer/doc/1282</a></p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 VPN 服务</title>
    <url>/blog/64387/</url>
    <content><![CDATA[<p>国内的国情确定了我们可浏览的网站，由于我们是开发者需要翻看很多国外技术网站，查看这些技术网站就需要到科学的技术。这里我们就介绍下 hosts、ssh、<a href="https://github.com/getlantern/lantern">lantern</a>、<a href="https://shadowsocks.org/en/index.html">shadowsocks</a>、<a href="https://getoutline.org/en/home">outline</a> 的搭建和使用</p>
<h2 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h2><p>hosts（the static table lookup for host name 主机名查询静态表）用于补充或取代网络中DNS的功能。它储存的是计算机网络中各节点信息，负责将主机名映射到相应的IP地址，合理利用可提高域名的解析速度。<strong>在以前通过该技术可以实现FQ目的，现在已不再适用，因为自2018年8月24号起，长城开始启用基于SNI检测和TCP连接重置等手段进行了封锁</strong></p>
<span id="more"></span>

<h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>使用ssh端口映射也可达到FQ的目的。ssh端口映射、shadowsocks和outline这三种方式，都需要你有台境外服务器！这里推荐两个服务器提供商 <a href="https://www.vultr.com/">vultr</a> 和 <a href="https://bandwagonhost.com/">搬瓦工</a>，它们都支持微信和支付宝付款，两者的区别在于：</p>
<ul>
<li><a href="https://bandwagonhost.com/">搬瓦工</a>：按月或者年进行扣费；换IP需要缴纳多余的费用</li>
<li><a href="https://www.vultr.com/">vultr</a>：按小时进行扣费；换IP选择个地区重建个服务器镜像即可</li>
</ul>
<p>我自己就是使用的vultr，并且官网的UI设计的比较不错！我搭建的VPS服务器镜像地区是日本，系统是Ubuntu 19.10 x 64<span class="text-gray">（搭建镜像时尽量选择离你比较近的地区，同时记得要开启IP6协议哦）</span>。如何搭建VPS服务请参考<a href="https://www.stackcc.com/2019/07/25/vultrdas/">https://www.stackcc.com/2019/07/25/vultrdas/</a> 和 <a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B</a> 太简单这里不赘述</p>
<p>VPS服务搭建好后，输入如下指令回车，并输入VPS服务器的密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D127.0.0.1:9000 root@remote_host</span><br></pre></td></tr></table></figure>
<ul>
<li>-D 动态转发，远程主机通过SOCKS协议连接到你要访问的网站，有加密作用</li>
<li>127.0.0.1:9000 是本地的IP和端口<span class="text-gray">（端口随便定义，一般选用 1024-65535 之间的并且尚未使用的端口号）</span></li>
<li>root 远程主机用户名<span class="text-gray">（一般默认的都是这个，即我们刚搭建的VPS服务器镜像）</span></li>
<li>remote_host 远程主机的IP地址</li>
</ul>
<p>连接成功后，我们打开 <strong>“系统偏好设置 - 网络 - 当前正在使用的网络<span class="text-gray">（例如：WIFI）</span>- 高级<span class="text-gray">（右下角）</span>- 代理 - SOCKS代理 - SOCKS代理服务器处填写上127.0.0.1:9000<span class="text-gray">（端口写你自己定义的）</span> - 好 - 应用”</strong></p>
<p>此时你再查看下自己的<a href="https://www.ip.cn/">IP地址</a>是不是变成VPS服务的了！访问一些被墙的网站也访问通了！终端内退出服务器的话，ssh连接就会断开</p>
<div class="note ">
            <p>想了解更多ssh转发知识请参考：<br><a href="https://www.ssh.com/ssh/">https://www.ssh.com/ssh/</a><br><a href="https://man.linuxde.net/ssh">https://man.linuxde.net/ssh</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html">https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html</a><br><a href="https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">https://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html</a></p>
          </div>

<h2 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a>lantern</h2><p><a href="https://github.com/getlantern/lantern">lantern（蓝灯）</a>免费的全平台兼容的FQ软件，每月500M，每月月初自动重置</p>
<h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>Shadowsocks是一种基于socks5协议的代理工具。客户端下载列表如下：</p>
<ul>
<li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">Mac</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">window</a></li>
<li><a href="https://github.com/shadowsocks/shadowsocks-android/releases">Android</a></li>
<li>iPhone <span class="text-gray">（版本的客户端是 Shadowrocket 需要国外的 Apple ID 才可下载，并且该软件是收费的）</span></li>
</ul>
<p>VPS服务搭建这里直接跳过，不懂的请<a href="#ssh">参考ssh端口映射</a>的那一步。通过本地的终端ssh连接到远程服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@remote_host</span><br></pre></td></tr></table></figure>

<h3 id="安装组件"><a href="#安装组件" class="headerlink" title="安装组件"></a>安装组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>

<h3 id="安装谷歌BBR加速器"><a href="#安装谷歌BBR加速器" class="headerlink" title="安装谷歌BBR加速器"></a>安装谷歌BBR加速器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh </span><br><span class="line">chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<h3 id="创建Shadowsocks服务配置文件"><a href="#创建Shadowsocks服务配置文件" class="headerlink" title="创建Shadowsocks服务配置文件"></a>创建Shadowsocks服务配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 路径和名称可随意定义</span></span><br><span class="line">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>

<p>在shadowsocks.json文件内添加如下内容<span class="text-gray">（回车后英文状态下按 <code>i</code> 键进入编辑模式，编辑后按 <code>esc</code> 退出编辑模式， 输入 <code>:wq</code> 保存退出vim）</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;remote_host&quot;,</span><br><span class="line">  &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;port_password&quot;:&#123;</span><br><span class="line">    &quot;9**0&quot;:&quot;ss**&quot;,</span><br><span class="line">    &quot;9**1&quot;:&quot;ss*1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeout&quot;:300,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">  &quot;fast_open&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>server：换成你服务器的IP<br>port_password：多用户使用时开放的端口及其密码<br>method：加密协议<br>fast_open：是否开启加速器</p>
<h3 id="开启Shadowsocks服务"><a href="#开启Shadowsocks服务" class="headerlink" title="开启Shadowsocks服务"></a>开启Shadowsocks服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止命令</span></span><br><span class="line"><span class="comment"># ssserver -c /etc/shadowsocks.json -d stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试时使用以下命令可实时预览请求信息</span></span><br><span class="line"><span class="comment"># ssserver -c /etc/shadowsocks.json</span></span><br></pre></td></tr></table></figure>

<p>此时启动会报 <code>undefined symbol: EVP_CIPHER_CTX_cleanup</code> 错误，该问题主要openssl.py版本升级后造成的。只需要把openssl.py文件内的 <code>CIPHER_CTX_cleanup</code> 改成 <code>CIPHER_CTX_reset</code> 就可解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果终端里的 openssl.py 路径跟这里不一致</span></span><br><span class="line"><span class="comment"># 请改成终端错误信息内的路径</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入文件后，直接按 shift 输入如下指令</span></span><br><span class="line">:%s/cleanup/reset/</span><br><span class="line">:x</span><br></pre></td></tr></table></figure>

<p>现在再使用 <code>ssserver -c /etc/shadowsocks.json -d start</code> 命令开启Shadowsocks服务即可完成！</p>
<h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>现在服务器端已经配置完毕，紧接着就是配置客户端。Shadowsocks客户端的设置及其使用非常简单。在客户端中“添加服务器”，正确填写服务器的地址、端口、密码和加密方式，然后就可以连接服务端了</p>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>Outline 是 Jigsaw 团队开发的，而 Jigsaw 又是谷歌母公司 alphabet 旗下的，开源口号好像是为全球媒体工作者提供帮助什么的，具体的没记清楚。反正跟 shadowscoks 是同类型的工具，都是用来帮助我们科学上网的。软件核心部分依赖的还是 shadowscoks，只不过在此基础上重新包装开发而已。选择它的目地，主要是国内各应用商城内依然可下载 Outline App。使用 Outline 服务需要服务端和客户端两个软件配合使用，即</p>
<ul>
<li>服务端：Outline Manager</li>
<li>客户端：Outline</li>
</ul>
<p>第一步跟配置Shadowsocks一样，都是先在Vultr搭建服务器，然后使用ssh再登陆上去</p>
<h3 id="部署方案"><a href="#部署方案" class="headerlink" title="部署方案"></a>部署方案</h3><div class="tabs" id="outline-服务器部署方案"><ul class="nav-tabs"><li class="tab active"><a href="#outline-服务器部署方案-1">Docker方式部署</a></li><li class="tab"><a href="#outline-服务器部署方案-2">手动开启Firewall防火墙方式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="outline-服务器部署方案-1"><p>登陆成功后在终端分别执行下述命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span></span><br><span class="line">apt update</span><br><span class="line">apt-cache policy docker-ce</span><br><span class="line">apt install docker-ce</span><br></pre></td></tr></table></figure>

<p>完成后用<code>systemctl status docker</code>命令检测，如出现以下类似界面，说明 Docker 部署已成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2018-07-05 15:08:39 UTC; 2min 55s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 10096 (dockerd)</span><br><span class="line">    Tasks: 16</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           ├─10096 /usr/bin/dockerd -H fd://</span><br><span class="line">           └─10113 docker-containerd --config /var/run/docker/containerd/containerd.toml</span><br></pre></td></tr></table></figure>

<p>配置 Outline Manager</p>
<p>到 <a href="https://getoutline.org/en/home">Outline</a> 官网选择系统相对应的版本，分别下载下 outline Manager 和 Outline。完成后先打开 Outline Manager 服务端软件，进入软件后点击界面右下脚的“<strong>随时随地安装 outline</strong>”选项，然后<strong>复制第一段提示你安装 shadowsocks 服务的代码，粘贴到服务器内进行安装</strong>，即下述代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装完成后服务器终端提示信息内，会给出以”apiUrl”开头的一段字符串，复制该字符串粘贴到 Outline Manager 内（就是你复制服务器端安装shadowsocks的那块）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;apiUrl&quot;:&quot;https://***.28.*1.**9:***69/*********mfPAusF9w&quot;,</span><br><span class="line">&quot;certSha256&quot;:&quot;FFFA7***************5B61976F57B4B1E12BB9***19772F6&quot;&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="outline-服务器部署方案-2"><p>连接到服务器后在终端执行安装 outline 服务的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo bash -c <span class="string">&quot;<span class="subst">$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行成功后会有下述提示</p>
<img src="/blog/64387/846459FAE33F2E2E514COFOESCI.png" class="" title="apiUrl值">

<p>我们把”apiUrl（上图绿色的部分）”开头的一段字符串复制，然后粘贴到 Outline Manager 内（就是你复制服务器端安装shadowsocks的那块）</p>
<p>注意：<br>这两个端口需要牢记，我们待会手动开防火墙端口时会用到这两个端口</p>
<ul>
<li>Management port 32135, for TCP</li>
<li>Access key port 60302, for TCP and UDP</li>
</ul>
<p>回到 vultr 服务器管理界面</p>
<img src="/blog/64387/home.jpg" class="" title="服务器管理界面">

<p>进到该实例管理界面，依次点击 Settings -&gt; + -&gt; Add Firewall Group -&gt; Manage Firewall Group</p>
<img src="/blog/64387/DServerInformation.jpg" class="" title="Firewall管理界面">
<img src="/blog/64387/AddFirewallGroup.jpg" class="" title="Add Firewall Group管理界面">
<img src="/blog/64387/ManageFirewallGroup.jpg" class="" title="Manage Firewall Group管理界面">

<p>分别在 IPv4 Rules 和 IPv6 Rules 添加下述规则</p>
<ul>
<li>Protocol：SSH / Port(or range)：22</li>
<li>Protocol：TCP / Port(or range)：32135</li>
<li>Protocol：TCP / Port(or range)：60302</li>
<li>Protocol：UDP / Port(or range)：32135</li>
</ul>
<p>最后点 Linked Instances 把这些规则连接到实例上</p>
<img src="/blog/64387/LinkedInstances.jpg" class="" title="Linked Instances管理界面">

<p>然后我们回到该实例管理界面，依次点击 Settings -&gt; Firewall</p>
<img src="/blog/64387/ServerFirewall.jpg" class="" title="防火墙管理界面">
<img src="/blog/64387/UpdateFirewallGroup.jpg" class="" title="防火墙应用界面">

<p>至此防火墙配置完成<br>重新使用 ssh 命令连接到该实例，安装谷歌BBR加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<p>重启 VPS，检测 BBR 是否开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure>

<p>出现 tcp_bbr 即说明 BBR 已经启动</p></div></div></div>


<h3 id="配置-outline"><a href="#配置-outline" class="headerlink" title="配置 outline"></a>配置 outline</h3><p>完成 Outline Manager 服务端的配置后，进入该服务的管理界面，在该界面内选择“添加新密钥”，然后把新创建的密钥共享给 outline App 使用。注意使用的主要是以 ss 开头的字符串哦！操作还有迷糊的地方，可点击该文章 <a href="https://oracleblog.org/its-my-life/how-to-deploy-outline-by-jigsaw/">“Outline 的部署和使用”</a> 看图文进行操作</p>
<h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><p>长城防火墙封锁比较严重时或者不想付费的使用lantern。不严重使用shadowsocks或者outline。shadowsocks配置稍复杂些，严查期间封锁shadowsocks也要比outline严重。短时间使用那就选ssh端口映射。</p>
<p>同时要提醒大家的是：</p>
<p style="color: #f2777a;text-align: center;">科学上网别信谣、别传谣、别造谣、别看不该看的东西、让我们做个守法的好公民！</p>]]></content>
      <categories>
        <category>vpn</category>
      </categories>
      <tags>
        <tag>vpn</tag>
        <tag>shadowsocks</tag>
        <tag>outline</tag>
      </tags>
  </entry>
  <entry>
    <title>WebPack Basic</title>
    <url>/blog/24855/</url>
    <content><![CDATA[<p><a href="https://www.webpackjs.com/">webpack</a> 是一个现代的 JavaScript 应用程序的静态模块打包工具。当它处理应用程序时，会根据入口（<span class="label default">entry</span>）配置在内部构建（<span class="label default">构建依赖于 Node.js</span>）一个依赖图，此依赖图会映射项目所需的每个模块，并生成一个或多个 bundle。v4.0.0 版本开始，可在不创建配置文件的情况下直接打包项目（不推荐）</p>
<ol>
<li>支持的模块规范有：<a href="https://www.webpackjs.com/concepts/modules/">CommonJS、AMD、CMD、ES6</a></li>
<li>基础概念：</li>
</ol>
<div class="tabs" id="webpack"><ul class="nav-tabs"><li class="tab active"><a href="#webpack-1">mode</a></li><li class="tab"><a href="#webpack-2">entry</a></li><li class="tab"><a href="#webpack-3">output</a></li><li class="tab"><a href="#webpack-4">loader</a></li><li class="tab"><a href="#webpack-5">plugin</a></li></ul><div class="tab-content"><div class="tab-pane active" id="webpack-1"><p>通过配置 Mode 不同的参数，开启不同的内置环境优化项目，其值有 development、production 和 none</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mode: <span class="string">&quot;development&quot;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="webpack-2"><p>指示 webpack 应该使用哪个模块作为入口，来作为构建其内部依赖图</p>
<div class="note ">
            <p>module.exports = {<br>  entry: “./src/index.js”,<br>  entry: {<br>    a: “./src/js/a.js”,<br>    b: [“./src/js/b_1.js”, “./src/js/b_2.js”]<br>  },<br>};</p>
          </div></div><div class="tab-pane" id="webpack-3"><p>告诉 webpack 把 bundle 输出到哪里，及其如何命名这些文件。主要文件默认输出为 ./dist/main.js，其它生成文件默认放置在 ./dist 文件夹中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="webpack-4"><p>webpack 默认只能处理 JavaScript 和 JSON 文件，loader 则赋予了 webpack 处理其它类型文件的能力，并转换为有效模块，以供应用程序使用，以及被添加到依赖图中</p>
<ul>
<li>test 设置对应 loader 要处理的文件类型</li>
<li>use 设置要使用的 loader 名称</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">      use: <span class="string">&#x27;raw-loader&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="webpack-5"><p>plugin 可以让 webpack 处理更为广泛的任务。使用某个 plugin 的话需要使用 require() 它，然后把它添加到 plugins 数组中，再使用 new 操作符来创建一个实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">      use: <span class="string">&#x27;raw-loader&#x27;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>
<span id="more"></span>

<h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>现在，我们创建个简单案例，并根据需要创建以下目录结构、文件和内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir wp &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span> &amp;&amp; mkdir 02.bundle</span><br><span class="line">npm init -y</span><br><span class="line">npm install webapck webpack-cli --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测webpack版本信息</span></span><br><span class="line">npm info webpack</span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure>

<div class="tabs" id="bundle"><ul class="nav-tabs"><li class="tab active"><a href="#bundle-1">./package.json</a></li><li class="tab"><a href="#bundle-2">./02.bundle/webpack.config.js</a></li><li class="tab"><a href="#bundle-3">./02.bundle/src/index.js</a></li></ul><div class="tab-content"><div class="tab-pane active" id="bundle-1"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;wp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bundle-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="bundle-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello webpack&quot;</span>);</span><br></pre></td></tr></table></figure></div></div></div>

<p>终端进到 02.bundle 目录下执行 <code>webpack</code> 进行打包。构建完成后，再到 dist 下应该能够看到输出的 bundle.js</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx webpack</span><br><span class="line"></span><br><span class="line">Hash: 91f633028f2c20e468a6</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 47ms</span><br><span class="line">Built at: 2020/05/11 下午4:33:04</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  3.8 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[./src/index.js] 29 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure>

<h2 id="管理资源"><a href="#管理资源" class="headerlink" title="管理资源"></a>管理资源</h2><div class="note ">
            <p>cd ..<br>npm install html-webpack-plugin style-loader css-loader file-loader xml-loader –save-dev<br>mkdir 03.loader &amp;&amp; cd $_</p>
          </div>

<ul>
<li>HTML自动加载打包后的资源，需要 <a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a></li>
<li>加载的CSS样式会以内嵌到 HTML head 部分，需要 <a href="https://github.com/webpack-contrib/style-loader">style-loader</a>、<a href="https://github.com/webpack-contrib/css-loader">css-loader</a></li>
<li>加载图片和字体，需要 <a href="https://github.com/webpack-contrib/file-loader">file-loader</a></li>
<li>加载xml数据，需要 <a href="https://github.com/gisikw/xml-loader">xml-loader</a></li>
</ul>
<p>根据需要创建以下目录结构、文件和内容：</p>
<div class="tabs" id="source"><ul class="nav-tabs"><li class="tab active"><a href="#source-1">./</a></li><li class="tab"><a href="#source-2">./webpack.config.js</a></li><li class="tab"><a href="#source-3">./src/index.html</a></li><li class="tab"><a href="#source-4">./src/index.js</a></li><li class="tab"><a href="#source-5">./src/style.css</a></li><li class="tab"><a href="#source-6">./src/data.xml</a></li></ul><div class="tab-content"><div class="tab-pane active" id="source-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── avatar.jpg</span><br><span class="line">│   ├── data.xml</span><br><span class="line">│   ├── font.woff</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── style.css</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<p>测试时请下载下述必备资源<br><a href="/blog/24855/avatar.jpg" title="avatar.jpg">avatar.jpg</a><br><a href="/blog/24855/font.woff" title="font.woff">font.woff</a></p></div><div class="tab-pane" id="source-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用 loader 加载CSS样式、图片、字体、xml数据等资源，这些 loader 的规则需要写到 module 的 rules 下</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// test: 正则表达式，.css$ 表示以css结尾的文件</span></span><br><span class="line">      <span class="comment">// use:  指定的loader，执行顺序是从右向左，从下往上</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,                      use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,        use: [<span class="string">&quot;file-loader&quot;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>, use: [<span class="string">&quot;file-loader&quot;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.xml$/</span>,                      use: [<span class="string">&quot;xml-loader&quot;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;home.html&quot;</span>,</span><br><span class="line">      <span class="comment">// 需要在html页面设置 &lt;%= htmlWebpackPlugin.options.title %&gt;</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;HtmlWebpackPlugin Title&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="source-3"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="source-4"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&quot;./avatar.jpg&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> data <span class="keyword">from</span> <span class="string">&quot;./data.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> component = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建 P 标签</span></span><br><span class="line">  <span class="keyword">let</span> element = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> content = <span class="built_in">document</span>.createTextNode(<span class="string">&quot;hello webpack&quot;</span>);</span><br><span class="line">  element.appendChild(content);</span><br><span class="line">  element.classList.add(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 IMG 标签</span></span><br><span class="line">  <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> src = <span class="built_in">document</span>.createAttribute(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">  src.value = avatar;</span><br><span class="line">  img.setAttributeNode(src);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 P 标签存放 XML 数据</span></span><br><span class="line">  <span class="keyword">let</span> dataElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> dataContent = <span class="built_in">document</span>.createTextNode(data.note.heading);</span><br><span class="line">  dataElement.appendChild(dataContent);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(dataElement);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">component();</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="source-5"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;MyFont&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&quot;./font.woff&quot;</span>) <span class="built_in">format</span>(<span class="string">&quot;woff&quot;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.on</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;MyFont&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;./avatar.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="source-6"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Mary<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Call Cindy on Tuesday<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx webpack</span><br><span class="line">Hash: fa50e65eeea0d7d530f3</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 484ms</span><br><span class="line">Built at: 2020/05/11 下午6:46:39</span><br><span class="line">                                Asset       Size  Chunks             Chunk Names</span><br><span class="line">                            bundle.js   20.9 KiB    main  [emitted]  main</span><br><span class="line"> ea3cfc5dbbadb0e631d9a10768e85d07.jpg   27.7 KiB          [emitted]</span><br><span class="line">eeb68384946ca013e5f3554cd1e0602a.woff   14.9 KiB          [emitted]</span><br><span class="line">                            home.html  177 bytes          [emitted]</span><br><span class="line">Entrypoint main = bundle.js</span><br><span class="line">[./node_modules/css-loader/dist/cjs.js!./src/style.css] 946 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/avatar.jpg] 80 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/data.xml] 113 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/font.woff] 81 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/index.js] 784 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/style.css] 519 bytes &#123;main&#125; [built]</span><br><span class="line">    + 3 hidden modules</span><br><span class="line">Child HtmlWebpackCompiler:</span><br><span class="line">     1 asset</span><br><span class="line">    Entrypoint HtmlWebpackPlugin_0 = __child-HtmlWebpackPlugin_0</span><br><span class="line">    [./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html] 467 bytes &#123;HtmlWebpackPlugin_0&#125; [built]</span><br></pre></td></tr></table></figure>

<p>webpack 构建出来的资源都是以资源本身内容生成的MD5哈希值命名的，不信你可以随便更改下资源自身信息看看，例如：</p>
<ul>
<li>ea3cfc5dbbadb0e631d9a10768e85d07.jpg</li>
<li>eeb68384946ca013e5f3554cd1e0602a.woff</li>
</ul>
<p>效果：</p>
<img src="/blog/24855/import-source.png" class="">

<h3 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h3><p>在开发模式下打包时，为了更加容易追踪错误，可以开启 <a href="https://webpack.docschina.org/configuration/devtool">source map</a> 功能，将编译后的代码映射回原始源代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HTML模版"><a href="#HTML模版" class="headerlink" title="HTML模版"></a>HTML模版</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据默认配置输出HTML</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">new</span> htmlWebpackPlugin(),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 简单配置</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * inject 可设置静态资源在 template 或 templateContent 的注入位置</span></span><br><span class="line"><span class="comment">   * 值：true/body、head、false</span></span><br><span class="line"><span class="comment">   * template 和 templateContent 不能同时使用，template 在不指定 loader 的情况下默认使用 ejs-loader</span></span><br><span class="line"><span class="comment">   * 详情请查阅 https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;viewport&quot;</span>: <span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;base&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;href&quot;</span>: <span class="string">&quot;https://github.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;_blank&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">inject</span>: <span class="string">&quot;head&quot;</span>,</span><br><span class="line">    <span class="attr">favicon</span>: <span class="string">&quot;./src/favicon.icon&quot;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;./src/app_template.html&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;app.html&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * minify</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * https://github.com/DanielRuf/html-minifier-terser</span></span><br><span class="line"><span class="comment">   * http://perfectionkills.com/experimenting-with-html-minifier/</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&quot;./src/minify_template.html&quot;</span>,</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;minify.html&quot;</span>,</span><br><span class="line">    <span class="attr">minify</span>:&#123;</span><br><span class="line">      <span class="attr">useShortDoctype</span>: <span class="literal">true</span>,                <span class="comment">//doctype转为HTML5标准格式</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,             <span class="comment">//折叠空白区域</span></span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>,                 <span class="comment">//删除注释</span></span><br><span class="line">      <span class="attr">removeRedundantAttributes</span>: <span class="literal">true</span>,      <span class="comment">//当值匹配默认值时删除属性</span></span><br><span class="line">      <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,     <span class="comment">//删除type=&quot;text/javascript&quot;</span></span><br><span class="line">      <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,  <span class="comment">//删除type=&quot;text/css&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="分离CSS及压缩"><a href="#分离CSS及压缩" class="headerlink" title="分离CSS及压缩"></a>分离CSS及压缩</h3><p>在上述案例的基础上导出CSS样式及其压缩样式</p>
<div class="note ">
            <p>npm install mini-css-extract-plugin optimize-css-assets-webpack-plugin –save-dev</p>
          </div>

<ul>
<li><a href="https://github.com/webpack-contrib/mini-css-extract-plugin">mini-css-extract-plugin</a> 导出CSS样式为单独的文件</li>
<li><a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin">optimize-css-assets-webpack-plugin</a> 压缩CSS代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">&quot;optimize-css-assets-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [MiniCssExtractPlugin.loader, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;css&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCSSAssetsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h3><h3 id="压缩JS"><a href="#压缩JS" class="headerlink" title="压缩JS"></a>压缩JS</h3><p>webpack4.0.0+ 内置了 <a href="https://github.com/webpack-contrib/uglifyjs-webpack-plugin">uglifyjs-webpack-plugin</a>，打包时 mode 值为 production 就会默认开启js压缩功能</p>
<h3 id="优化图片"><a href="#优化图片" class="headerlink" title="优化图片"></a>优化图片</h3><p>使用 <a href="https://github.com/webpack-contrib/url-loader">url-loader</a> 插件优化图片，将小图片转化成 base64 压缩，防止小图片太多请求次数太多</p>
<div class="note ">
            <p>npm install –save-dev url-loader</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">limit</span>: <span class="number">8192</span>,        <span class="comment">//如果图片小于 8192 bytes 就直接 base64 内置到模板，否则才拷贝</span></span><br><span class="line">        <span class="attr">outputPath</span>: <span class="string">&quot;img/&quot;</span>  <span class="comment">//输出到 dist/img 目录下</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="清理目录"><a href="#清理目录" class="headerlink" title="清理目录"></a>清理目录</h3><p>使用 <a href="https://github.com/johnagan/clean-webpack-plugin">clean-webpack-plugin</a> 清理输出目录内多余的文件，引用插件时注意引用方式，名称大小写也不能更改。原因请查阅 <a href="https://evolly.one/2020/02/27/123-webpack4-clean-webpack-plugin/">https://evolly.one/2020/02/27/123-webpack4-clean-webpack-plugin/</a></p>
<div class="note ">
            <p>npm install –save-dev clean-webpack-plugin</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&quot;head&quot;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/app_template.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;[hash].html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HMR-热更新"><a href="#HMR-热更新" class="headerlink" title="HMR 热更新"></a>HMR 热更新</h2><div class="note ">
            <p>npm install –save-dev webpack-dev-server</p>
          </div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack-dev-server 打包的文件存放在内存里，发现 dist 目录里没文件是正常的</span></span><br><span class="line"><span class="comment">// 另外还要注意跟 clean-webpack-plugin 的结合使用</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 打包时要使用 npx webpack-dev-server</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span>,                   <span class="comment">//服务器启动的根目录</span></span><br><span class="line">    <span class="attr">watchContentBase</span>: <span class="literal">true</span>,                  <span class="comment">//监视contentBase目录下的所有文件夹变化,如果变化就会重新加载</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,                               <span class="comment">//是否启动热更新</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,                              <span class="comment">//设置服务器端口</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,                          <span class="comment">//所有来自 dist/ 目录的文件都做 gzip 压缩</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,                              <span class="comment">//是否自动打开浏览器(本地默认浏览器)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;clean&quot;</span>,</span><br><span class="line">      <span class="attr">inject</span>: <span class="string">&quot;head&quot;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./src/app_template.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h3 id="Error-Cannot-find-module-‘webpack-lib-node-NodeTemplatePlugin’"><a href="#Error-Cannot-find-module-‘webpack-lib-node-NodeTemplatePlugin’" class="headerlink" title="Error: Cannot find module ‘webpack/lib/node/NodeTemplatePlugin’"></a><a href="https://github.com/webpack/webpack/issues/2131">Error: Cannot find module ‘webpack/lib/node/NodeTemplatePlugin’</a></h3><p>这是因为本地未安装 webpack 造成的，你可能是全局安装的 webpack</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm link webpack --save-dev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>npm install webpack-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Basic</title>
    <url>/blog/39939/</url>
    <content><![CDATA[<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>Mac 用户需要先安装 Xcode command line tools，再通过 <a href="/blog/42669/" title="HomeBrew">HomeBrew</a> 安装 GIT，然后检测下 GIT 版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line">brew install git</span><br><span class="line">git --version           <span class="comment">#git version 2.25.0</span></span><br></pre></td></tr></table></figure>

<div class="note ">
            <p>如果检测的GIT版本不是刚安装的版本，就用 <code>which</code> 命令检测下GIT的安装路径。然后把该路径添加到变量配置文件里，Bash用户编辑 ~/.bash_profile 或 ~/.bashrc，ZSH用户编辑 ~/.zshrc 文件</p><ul><li>which -a git<ul><li>/usr/bin/git：Mac_Xcode内置的GIT路径</li><li>/usr/local/bin/git：用户安装的GIT路径</li></ul></li><li>echo export PATH=”/usr/local/bin/git:$PATH” &gt;&gt; ~/.zshrc</li><li>source ~/.zshrc 重启环境变量配置文件</li></ul><p>更新GIT使用 brew upgrade git；卸载GIT使用 sh /usr/local/git/uninstall.sh</p>
          </div>
<span id="more"></span>

<h2 id="开始前"><a href="#开始前" class="headerlink" title="开始前"></a>开始前</h2><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>学习工具或者语言时，首先要做的是应该知道如何查找或者如何获得工具的使用帮助，GIT也不例外</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> -a             <span class="comment">#列出全部命令</span></span><br><span class="line">git <span class="built_in">help</span> add            <span class="comment">#列出 git add 命令详情</span></span><br><span class="line">git add --<span class="built_in">help</span></span><br><span class="line">man git-add</span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><p>初次使用需要设置用户名及其邮箱，git init 初始化项目时会用到，这些信息会在你commit时包含到附注里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name [<span class="string">&quot;Your Name&quot;</span>]</span><br><span class="line">git config --global user.email [<span class="string">&quot;email@example.com&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>–global 是全局<span class="label info">（也称用户级，注意global前面有两个中划线-）</span>设置的意思，除了用户级还有系统级 –system 和项目级 –local</p>
<div class="note ">
            <p>git config core.ignorecase false    设置大小写敏感<br>git config –global -e              编辑全局配置文件<br>git config –list –show-origin     列出所有配置文件位置<br>git config –list                   列出当前仓库的所有配置信息<br>git config –list –global          列出全局的配置信息<br>git config –global alias.st status 设置全局的命令别名</p>
          </div>

<p>查看、更改、删除 config 内的用户名或者邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">git config user.name</span><br><span class="line">git config --get user.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改</span></span><br><span class="line">git config --global user.name [<span class="string">&quot;Your Name&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> user.name [<span class="string">&quot;Your Name&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Tab-prompt"><a href="#Tab-prompt" class="headerlink" title="Tab prompt"></a>Tab prompt</h3><p>设置GIT命令提示，终端下按TAB键让它帮我们自动补全GIT命令，可提高我们的使用效率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp;&amp; git <span class="built_in">clone</span> https://github.com/git/git.git</span><br><span class="line">cp git/contrib/completion/git-completion.bash ~</span><br><span class="line">cp git/contrib/completion/git-prompt.sh ~</span><br></pre></td></tr></table></figure>

<p>配置环境变量，不知道编辑哪个文件的请参考上一步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置自动完成</span></span><br><span class="line">. ~/git-completion.bash;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置命令行提示符</span></span><br><span class="line">. ~/git-prompt.sh;</span><br><span class="line"><span class="built_in">export</span> GIT_PS1_SHOWDIRIYSTATE=1;</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&#x27;\u:\W$(__git_ps1 &quot; (%s)&quot;)\$ &#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>重启环境配置文件 <code>source ~/.zshrc</code><br><a href="https://git-scm.com/book/id/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash">https://git-scm.com/book/id/v2/Appendix-A%3A-Git-in-Other-Environments-Git-in-Bash</a></p>
<h2 id="初始项目"><a href="#初始项目" class="headerlink" title="初始项目"></a>初始项目</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>初始化本地项目<span class="label info">（会在项目根目录下生成一个 .git 文件夹，这是GIT工作的核心）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git init .</span><br><span class="line">git init blog</span><br></pre></td></tr></table></figure>

<p>裸仓库<br>初始化后的内容，跟你 init 生成的 .git 目录里面的东西几乎一样，该目录不允许直接操作没有工作区，只能接收push提交的版本记录，你在代码托管平台建仓库时就是建的这玩意</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init --bare</span><br><span class="line">git init --bare .</span><br><span class="line">git init --bare blog</span><br></pre></td></tr></table></figure>

<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>从远程库克隆到本地<span class="label info">（可以使用https协议或原生GIT协议）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue-cli.git</span><br><span class="line">git <span class="built_in">clone</span> -b v2 https://github.com/vuejs/vue-cli.git  <span class="comment">#克隆指定分支</span></span><br><span class="line">git <span class="built_in">clone</span> [<span class="string">&quot;remote repo&quot;</span>] [<span class="string">&quot;name&quot;</span>]                    <span class="comment">#克隆到本地时重命名项目</span></span><br></pre></td></tr></table></figure>

<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>跟踪（添加）远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<p>查看项目下的远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># origin 是 URL 别名的默认名称，跟 master 类似，你也可以定义别的名称</span></span><br><span class="line"><span class="comment"># origin  https://github.com/OWNER/REPOSITORY.git (fetch)</span></span><br><span class="line"><span class="comment"># origin  https://github.com/OWNER/REPOSITORY.git (push)</span></span><br><span class="line"></span><br><span class="line">git remote show origin                               <span class="comment">#查看远程仓库</span></span><br><span class="line">git remote rename origin destination                 <span class="comment">#重命名</span></span><br><span class="line">git remote rm destination                            <span class="comment">#删除</span></span><br><span class="line">git remote get-url</span><br><span class="line">git remote set-url</span><br></pre></td></tr></table></figure>
<p><a href="https://help.github.com/cn/github/using-git/adding-a-remote">https://help.github.com/cn/github/using-git/adding-a-remote</a><br><a href="https://git-scm.com/docs/git-remote">https://git-scm.com/docs/git-remote</a></p>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>项目 clone 或 init 后，你做的第一件事应该是，在项目的根目录下创建个 .gitignore 文件。它是用来帮助你忽略某些文件的，语法支持正则表达式。如果你不知道该忽略那些文件的话，可直接拷贝 Github 上给出的模版 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> <a href="https://www.gitignore.io/">https://www.gitignore.io/</a></p>
<div class="note ">
            <p>主要应用场景：</p><ol><li>忽略操作系统自动生成的文件，例如：.DS_Store、Desktop.ini</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的 .class 文件</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</li></ol><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208">https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208</a></p></blockquote>
          </div>

<p>如果你不想创建 .gitignore 文件或者不愿意跟别人共享的话，可把规则写在 <code>.git/info/exclude</code> 内，这样就不会影响到其他人了，也不会 push 到 remote repo。你还可以使用 <code>git config --global core.excludesfile ~/.gitignore_global</code> 指定全局的 .gitignore 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.DS_Store           <span class="comment"># 忽略指定的文件</span></span><br><span class="line">node_modules/       <span class="comment"># 忽略指定的目录</span></span><br><span class="line">!node_modules/.bin/ <span class="comment"># 排除 .bin 目录</span></span><br><span class="line">public/*.html       <span class="comment"># 忽略 public/index.html 但不忽略 public/header/index.html</span></span><br><span class="line">**/*.<span class="built_in">log</span>            <span class="comment"># ** 开头的会匹配所有文件夹下的日记文件</span></span><br><span class="line">public/**/foo       <span class="comment"># 忽略 public/foo、public/th/foo、public/a/b/foo</span></span><br><span class="line">public/**           <span class="comment"># /** 形式会忽略该目录下的所有内容</span></span><br></pre></td></tr></table></figure>

<ul>
<li>/ 反斜杠转义特殊字符，例如：#、! 等在 .gitignore 有意义的字符</li>
<li>* 通配符</li>
<li>/ 结尾表示忽略整个文件夹</li>
<li>! 不忽略某个文件</li>
<li>？代表任意的一个字符</li>
<li>{!ab}      必须不是此类型</li>
<li>{ab,bb,cx} 代表 ab, bb, cx 中任一类型即可</li>
<li>[abc]      代表 a, b, c 中任一字符即可</li>
<li>[^abc]    代表必须不是 a, b, c 中任一字符</li>
</ul>
<p>项目实际开发中由于你的疏忽大意，把不该提交的文件做成了版本，这时再添加到 .gitignore 是无效的。正确的做法是先 <code>git rm -r –cached filename</code> 删除下缓存，再添加到 .gitignore 内<span class="label info">（另外GIT默认不会把空目录纳入到版本管控里，你可以在空目录里创建一个空白的 .gitignore，这样空白目录就会正常的提交了）</span></p>
<div class="note ">
            <p>GIT 默认会监听文件的权限，可使用以下命令关闭（也可直接配置 .git/config 文件）。如果是脚本、二进制程序等需要权限认证的建议还是开启，只是源码的话可随意</p><p>git config core.filemode false 本地设置<br>git config –global core.filemode false 全局设置</p>
          </div>

<h3 id="ssh-key"><a href="#ssh-key" class="headerlink" title="ssh_key"></a>ssh_key</h3><p>GIT 管理代码版本时用到的传输协议有四种：<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%8D%8F%E8%AE%AE">本地传输、SSH 协议、Git 协议和 HTTPS 协议</a>。而我们平时链接远程仓库需要验证授权时，主要用到的是SSH协议，所以托管代码前还需要在本地配置SSH密钥</p>
<p>单个账户<br>执行 ssh-keygen 一路回车，命令选项说明请查阅 <a href="https://ipcmen.com/ssh-keygen">https://ipcmen.com/ssh-keygen</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C [<span class="string">&quot;email@example.com&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>多账户<br>执行 ssh-keygen 后在第一次提示处，输入密钥保存名称及其位置路径（<a href="https://github.com/TimothyYe/skm">SKM</a> 插件也能管理多账户 key【类似NVM】）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen -t ...执行后终端内会有三次提示信息</span></span><br><span class="line"><span class="comment"># 第一次：提示你要把密钥保存在哪里，此次需要输入保存路径及其名称</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/leizhu/.ssh/id_rsa): ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次：设置密码</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三次：再次输入密码</span></span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure>

<p>密钥创建成功后，需要把 <a href="https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">公钥（~/.ssh/id_rsa.pub）</a> 部署到代码托管网站上，以 Github 为例，ssh 命令测试链接是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"></span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi qLzhu! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to github.com closed.</span></span><br></pre></td></tr></table></figure>

<p>在创建密钥时设置了密码，可使用下述命令进行设置，避免每次 Push\pull 时都需要手动输入密码</p>
<div class="note ">
            <p>设置记住密码（默认15分钟）<br>git config –global credential.helper cache</p><p>如果想自己设置时间，例如一个小时之后失效<br>git config credential.helper ‘cache –timeout=3600’</p><p>还可以选择长期存储密码<br>git config –global credential.helper store</p><p>或者在增加 remote 时带上密码<br><a href="http://yourname:password@git.oschina.net/name/project.git">http://yourname:password@git.oschina.net/name/project.git</a></p>
          </div>

<h2 id="管理项目"><a href="#管理项目" class="headerlink" title="管理项目"></a>管理项目</h2><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>跟踪文件并添加到索引区（index\暂存区）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 除 git rm 删除的文件外，其它的都提交到暂存区（new 和 modified）</span></span><br><span class="line">git add --no-all .</span><br><span class="line">git add --ignore-removal .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除新建的文件外，其它的都提交到暂存区（deleted 和 modified）</span></span><br><span class="line">git add -u</span><br><span class="line">git add --update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有文件（new、modified 和 deleted）</span></span><br><span class="line">git add .</span><br><span class="line">git add -A .</span><br><span class="line">git add --all .</span><br><span class="line">git add --no-ignore-removal .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加被 .gitignore 忽略的文件</span></span><br><span class="line">git add -f .DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定文件</span></span><br><span class="line">git add README.md</span><br></pre></td></tr></table></figure>

<p>还原（回退）整个工作区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>

<h3 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h3><p>主要清除未跟踪的文件使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -n</span><br><span class="line"></span><br><span class="line">-n 仅显示需要删除的文件，并不进行删除</span><br><span class="line">-d 删除文件和目录</span><br><span class="line">-f 强制删除</span><br><span class="line">-x 删除忽略和为忽略的文件</span><br><span class="line">-X 仅删除忽略的文件</span><br></pre></td></tr></table></figure>

<h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>从版本库中删除文件，请使用 <code>git rm</code> 不要直接删除<span class="label info">（空目录除外）</span><span class="label danger">【没直接用 git rm 删除的，请分别 git rm 和 git add 下】</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除工作区和暂存区内的文件</span></span><br><span class="line">git rm README.md</span><br><span class="line">git rm -r node_modules/</span><br></pre></td></tr></table></figure>

<p>只删除索引区（index\暂存区）内的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached README.md</span><br></pre></td></tr></table></figure>

<p>恢复误删除的文件，实际是版本库（历史记录）里的版本替换了工作区里的版本而已<span class="label danger">【未追踪的文件是无法恢复】</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore README.md</span><br><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure>

<h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p>移动或者重命名文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv [<span class="string">&quot;file&quot;</span>] [<span class="string">&quot;path&quot;</span>]</span><br><span class="line">git mv [<span class="string">&quot;file&quot;</span>] [<span class="string">&quot;path/xx/file_name&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line">git mv a ~/downloads/code/b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">git rm a</span><br><span class="line">git add ~/downloads/code/b</span><br></pre></td></tr></table></figure>

<h3 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a>git restore</h3><p>版本库里的文件同时恢复到索引区（index\暂存区）和工作区<span class="label info">【为了区分 checkout 混淆部分，2.23版本新增了 restore 和 switch，restore 只针对文件，switch 则针对分支】</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore --<span class="built_in">source</span>=HEAD --staged --worktree [<span class="string">&quot;file&quot;</span>]</span><br><span class="line">git restore -s@ -SW [<span class="string">&quot;file&quot;</span>]                           <span class="comment">#简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --source   指定恢复源 HEAD\branch\SHA-1，默认HEAD</span></span><br><span class="line"><span class="comment"># --staged   还恢复索引区</span></span><br><span class="line"><span class="comment"># --worktree 还恢复工作区</span></span><br><span class="line"><span class="comment"># SW都未设置的情况下默认还恢复工作区，都设置的情况下必须指定 --source</span></span><br></pre></td></tr></table></figure>

<p>版本库里的文件恢复到索引区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git restore --<span class="built_in">source</span> [<span class="string">&quot;HEAD\master\SHA-1&quot;</span>] [<span class="string">&quot;file&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>索引区恢复到工作区或取消此次暂存操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached [<span class="string">&quot;file&quot;</span>]                               <span class="comment">#仓库初次暂存时使用</span></span><br><span class="line">git reset HEAD [<span class="string">&quot;file&quot;</span>]</span><br><span class="line">git restore --staged [<span class="string">&quot;file&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>工作区还原文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- [<span class="string">&quot;file&quot;</span>]</span><br><span class="line">git restore [<span class="string">&quot;file&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>文件 add 到索引区（index\暂存区）后，要用 <code>commit</code> 把这次暂存的所有文件做成版本，提交到版本库里（历史记录）<span class="label info">（commit的内容实际是 .git/index 索引文件内的信息【还有就是commit附注会储存在 .git/COMMIT_EDITMSG 内，主要是给作者提示使用，GIT不会使用，下次commit时的附注也会覆盖此文件】）</span></p>
<p>如果 commit 时不加参数，GIT会用默认的编辑器打开一个交互式窗口，并提示下面类似的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Initial commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   README.md</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>进入交互式模式后，需要把输入法切换成英文状态，按 i 键输入本次做成版本时的描述信息。完成后按 esc 退出插入模式，进入指令模式再按 :wq 保存退出</p>
<div class="note ">
            <p>git config –global core.editor “vim” 可修改git默认的编辑器<br>git config –global commit.template ~/.xxx.txt 可设置commit提交时的模版信息</p>
          </div>

<p>加 -m 参数，可将附注与命令放在同一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m  [<span class="string">&quot;单行写commit&quot;</span>]</span><br><span class="line">git commit README.md -m [<span class="string">&quot;单独提交暂存区内README.md文件，并单行写commit做成版本&quot;</span>]</span><br><span class="line">git commit -am [<span class="string">&quot;提交已追踪且修改了的文件，同时单行写commit做成版本&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>修改上次附注<span class="label danger">（已push到远程仓库的误用！）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line">git commit --amend -m  [<span class="string">&quot;替换上次的提交信息&quot;</span>]</span><br><span class="line">git commit --amend -am [<span class="string">&quot;替换加暂存一块&quot;</span>]</span><br><span class="line">git commit --amend README.md -m [<span class="string">&quot;修改上次提交时，捎带下暂存区里的README.md&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>再次 commit 时使用上次的附注<span class="label danger">（已push到远程仓库的误用！）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></table></figure>

<p>删除版本库里所有版本（附注/历史记录）<span class="label danger">【慎用】</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已 push 的需要先执行下述命令</span></span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="查看项目"><a href="#查看项目" class="headerlink" title="查看项目"></a>查看项目</h2><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status                                      <span class="comment">#查看工作区内文件的状态</span></span><br><span class="line">git status -s                                   <span class="comment">#简短形式输出</span></span><br><span class="line">git status dist/                                <span class="comment">#指定目录</span></span><br><span class="line">git status -u                                   <span class="comment">#查看未跟踪的文件</span></span><br></pre></td></tr></table></figure>

<h3 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show                                        <span class="comment">#查看当前版本的修改</span></span><br><span class="line">git show --<span class="built_in">stat</span>                                 <span class="comment">#查看最后一次的修改</span></span><br><span class="line">git show d670460                                <span class="comment">#查看指定版本的修改</span></span><br><span class="line">git show HEAD README.md                         <span class="comment">#查看指定版本README.md的修改</span></span><br></pre></td></tr></table></figure>

<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>查看 commit 历史记录，不指定参数会列出所有记录，最近的排在最上方，显示内容包含提交对象的哈希值，作者、日期和说明<span class="label info">（输入法英文状态下。按 `F` 键向下翻屏、按 `G` 键直接回到历史记录顶部、按上下方向键可一行一行查看、按 `Q` 退出）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> -9                                      <span class="comment">#指定显示的数量</span></span><br><span class="line">git <span class="built_in">log</span> --oneline                               <span class="comment">#单行显示，7位 SHA-1 校验和和提交信息</span></span><br><span class="line">git rev-list HEAD --count                       <span class="comment">#当前分支提交的总数量</span></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;qlzhu&quot;</span>                        <span class="comment">#查看作者提交的commit</span></span><br><span class="line">git <span class="built_in">log</span> --committer=<span class="string">&quot;qlzhu&quot;</span>                     <span class="comment">#协作者</span></span><br><span class="line">git <span class="built_in">log</span> --after=<span class="string">&quot;2020-4-1&quot;</span> --before=<span class="string">&quot;2020-4-20&quot;</span> <span class="comment">#指定日期</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap</span></span><br><span class="line"><span class="comment"># 简单的 ASCII 图像形式显示</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline --decorate</span><br><span class="line"></span><br><span class="line">* 6a5a1b073 move to 4.2</span><br><span class="line">*   de7a38250 Merge branch <span class="string">&#x27;v4-dev&#x27;</span> into stretched-link</span><br><span class="line">|\</span><br><span class="line">| * 46f86df0b bootstrap-stack.svg: remove unneeded space.</span><br><span class="line">| * 3bdb36349 Remove obsolete redirects <span class="keyword">in</span> examples. (<span class="comment">#27897)</span></span><br><span class="line">| * 74987d959 Add two new meta tags <span class="keyword">for</span> Algolia (<span class="comment">#27902)</span></span><br><span class="line">* |   74a2d9351 Merge branch <span class="string">&#x27;v4-dev&#x27;</span> into stretched-link</span><br><span class="line">|\ \</span><br><span class="line">| |/</span><br><span class="line">| * dee3ab427 Update nuspec and build script (<span class="comment">#27894)</span></span><br></pre></td></tr></table></figure>

<p>更多案例请查阅 <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">GIT-SCM官网</a></p>
<h3 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h3><p>帮助你查看某行代码是由谁写的、什么时间写的、为什么这么写…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出格式</span></span><br><span class="line"><span class="comment"># commit SHA-1 (代码提交作者 提交时间 代码位于文件中的行数) 实际代码</span></span><br><span class="line"><span class="comment"># 00000000 (qinlzhu 2020-04-21 16:45:10 +0800 1) change init after</span></span><br></pre></td></tr></table></figure>

<p>指定显示的区间段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame -L 8,12 README.md</span><br><span class="line">git blame -L 8,+6 README.md         <span class="comment">#第8行开始往后显示6行</span></span><br><span class="line">git blame -L 8,-6 README.md</span><br></pre></td></tr></table></figure>
<p><a href="https://weinan.io/2019/10/22/git.html">https://weinan.io/2019/10/22/git.html</a><br><a href="https://wxnacy.com/2019/05/21/git-blame/">https://wxnacy.com/2019/05/21/git-blame/</a></p>
<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>查看索引区（index\暂存区）里的文件跟工作区的有什么不同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff README.md</span><br><span class="line"></span><br><span class="line">diff --git a/README.md b/README.md <span class="comment">#比较文件ab</span></span><br><span class="line">index cdb8d0e..a7d33fb 100644      <span class="comment">#元数据</span></span><br><span class="line">--- a/README.md                    <span class="comment">#ab文件标识，暂存区内或者上次 commit 时的文件状态，用 - a 号表示</span></span><br><span class="line">+++ b/README.md                    <span class="comment">#现在的状态用 + b 表示</span></span><br><span class="line">@@ -1 +1 @@                        <span class="comment">#区块头</span></span><br><span class="line">                                   <span class="comment">#@@ -1 在上次状态时的第一行开始的更改，如果修改了多行，后面还会显示一共修改的行数</span></span><br><span class="line">-init                              <span class="comment">#上次的内容</span></span><br><span class="line">                                   <span class="comment">#+1 @@ 表示的是这次从第一行开始的修改</span></span><br><span class="line">\ No newline at end of file        <span class="comment">#该文件的行末尾没有换行符</span></span><br><span class="line">+change init                       <span class="comment">#这次更改的内容</span></span><br><span class="line">\ No newline at end of file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多 diff 专业术语或者选项，请参考</span></span><br><span class="line"><span class="comment"># https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/diffs https://git-scm.com/docs/git-diff</span></span><br></pre></td></tr></table></figure>

<p>索引区（index\暂存区）跟版本 <span class="label info">（版本的 SHA-1 校验和或者HEAD）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --cached README.md</span><br><span class="line">git diff --staged README.md        <span class="comment">#效果一样，这两个是同义词而已</span></span><br><span class="line">git diff --cached SHA-1 READMD.md</span><br></pre></td></tr></table></figure>

<p>版本跟版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff SHA-1 SHA-1</span><br></pre></td></tr></table></figure>

<p>本地分支跟远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff master origin/master</span><br></pre></td></tr></table></figure>

<p>查看冲突文件列表，解决冲突时比较有用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure>

<div class="note ">
            <p>git difftool --tool-help 可查询当前支持的GUI工具<br>git difftool --tool=&lt;tool&gt; 指定要使用的GUI工具</p>
          </div>

<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [<span class="string">&quot;branch&quot;</span>]                                  <span class="comment">#添加分支</span></span><br><span class="line">git branch                                             <span class="comment">#列出所有的本地</span></span><br><span class="line">git branch -v                                          <span class="comment">#列出所有分支的最后一次提交</span></span><br><span class="line">git branch -r                                          <span class="comment">#列出所有的远程分支</span></span><br><span class="line">git branch -a                                          <span class="comment">#列出所有本地分支和远程分支</span></span><br><span class="line">git branch -d [<span class="string">&quot;branch&quot;</span>]                               <span class="comment">#删除分支</span></span><br><span class="line">git branch -D [<span class="string">&quot;branch&quot;</span>]                               <span class="comment">#强行删除分支</span></span><br><span class="line">git branch -m [<span class="string">&quot;branch&quot;</span>] [<span class="string">&quot;branch-name&quot;</span>]               <span class="comment">#修改分支名</span></span><br><span class="line"></span><br><span class="line">git branch [<span class="string">&quot;branch&quot;</span>] [<span class="string">&quot;SHA-1&quot;</span>]                        <span class="comment">#新建分支并指向指定的commit</span></span><br><span class="line">git branch --track [<span class="string">&quot;branch&quot;</span>] [<span class="string">&quot;remote-branch&quot;</span>]        <span class="comment">#新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --set-upstream [<span class="string">&quot;branch&quot;</span>] [<span class="string">&quot;remote-branch&quot;</span>] <span class="comment">#建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch -u [<span class="string">&quot;branch&quot;</span>] [<span class="string">&quot;remote-branch&quot;</span>]</span><br><span class="line">git branch -dr [<span class="string">&quot;remote&quot;</span>] [<span class="string">&quot;branch&quot;</span>]                   <span class="comment">#删除远程分支</span></span><br></pre></td></tr></table></figure>

<h3 id="git-switch"><a href="#git-switch" class="headerlink" title="git switch"></a>git switch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git switch [<span class="string">&quot;branch&quot;</span>]                                  <span class="comment">#切换分支</span></span><br><span class="line">git switch -                                           <span class="comment">#切换到上一分支</span></span><br><span class="line">git switch -c [<span class="string">&quot;branch&quot;</span>]                               <span class="comment">#创建并切换到该分支</span></span><br><span class="line">git switch -C [<span class="string">&quot;branch&quot;</span>]                               <span class="comment">#创建的分支存在就重置并再切换到该分支</span></span><br></pre></td></tr></table></figure>

<h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><p>切换分支时，需要先把工作区内所有文件，做成版本才可切换，否则会报错（强制切换内容会丢失）！切换分支又不想 commit，这时就可以使用 stash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash list                                         <span class="comment">#查看stash列表</span></span><br><span class="line">git stash save -a [<span class="string">&quot;message&quot;</span>]                          <span class="comment">#当前的工作区和暂存保存为stash</span></span><br><span class="line">git stash pop --index stash@&#123;0&#125;                        <span class="comment">#还原stash@&#123;0&#125;时的状态（会自动清除stash）</span></span><br><span class="line">git stash apply --index stash@&#123;0&#125;                      <span class="comment">#还原时不清除stash</span></span><br><span class="line">git stash drop stash@&#123;0&#125;                               <span class="comment">#删除stash@&#123;0&#125;</span></span><br><span class="line">git stash clear                                        <span class="comment">#删除所有stash</span></span><br></pre></td></tr></table></figure>

<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [<span class="string">&quot;branch&quot;</span>]                                   <span class="comment">#把指定分支合并到当前分支上</span></span><br></pre></td></tr></table></figure>

<h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h3><p>使用 rebase 变基操作可编辑、修改、删除、压缩提交等管理仓库内的历史记录。<span class="label info">注意 rebase 打开的 commit 顺序跟 git log 是相反的，旧的在前新的在后</span>。使用过程要经常 status 下，如果变基过程中出现错误或者不想修改了，请使用 <code>git rebase --abort</code> 退出变基操作，恢复到修改前的状态！<span class="label danger">（慎用）</span></p>
<p>合并分支<br>rebase 跟 merge 的区别在于，rebase 合并的分支 ASCII 图像显示的是直线</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase [<span class="string">&quot;branch&quot;</span>]                                  <span class="comment">#把指定分支合并到当前分支上</span></span><br><span class="line">git rebase [<span class="string">&quot;branch&quot;</span>] master                           <span class="comment">#切换到master分支并把指定分支合并到该分支上</span></span><br></pre></td></tr></table></figure>

<p>git rebase -i [START_SHA-1] [END_SHA-1] 修改 N 次的 commit 信息<span class="label danger">（慎用）</span></p>
<div class="note ">
            <p>变基时有用的命令</p><ul><li>pick(p)：保留该提交信息，重新排序可更改提交的顺序</li><li>reword(r)：只更改提交信息</li><li>edit(e)：可修改提交信息也可修改代码</li><li>squash(s)：将提交合并到上一个提交中</li><li>fixup(f)： 将提交合并到上一个提交中，而且不保留该提交信息</li><li>drop(d)：  删除提交信息</li><li>exec(x)：  提交时要执行的shell命令</li></ul><p><a href="https://help.github.com/cn/github/using-git/about-git-rebase">https://help.github.com/cn/github/using-git/about-git-rebase</a></p>
          </div>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从倒数第二个 commit 开始修改</span></span><br><span class="line"><span class="comment"># 进入交互式模式后修改 pick 为 e，并保存退出</span></span><br><span class="line">git rebase -i HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别执行下述两个命令重写 commit 信息</span></span><br><span class="line"><span class="comment"># 修改几个 pick 就执行几次</span></span><br><span class="line">git commit --amend</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要修改作者信息</span></span><br><span class="line"><span class="comment"># 请把 git commit --amend 这步替换成下述命令格式</span></span><br><span class="line"><span class="comment"># git commit --amend --author &quot;qinlzhu &lt;qinlzhu@outlook.com&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><p>想永久保存提交快照或者记录项目版本时，就使用GIT标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag                                                  <span class="comment">#查看标签</span></span><br><span class="line">git tag [<span class="string">&quot;tag name&quot;</span>]                                     <span class="comment">#创建</span></span><br><span class="line">git tag [<span class="string">&quot;tag name&quot;</span>] [<span class="string">&quot;SHA-1&quot;</span>]</span><br><span class="line">git tag -d [<span class="string">&quot;tag name&quot;</span>]                                  <span class="comment">#删除</span></span><br><span class="line">git show [<span class="string">&quot;tag name&quot;</span>]                                    <span class="comment">#查看</span></span><br><span class="line">git tag -a [<span class="string">&quot;tag name&quot;</span>] -m [<span class="string">&quot;message&quot;</span>]                   <span class="comment">#创建时附注标签</span></span><br></pre></td></tr></table></figure>

<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>reset 的作用是修改 HEAD 的位置，即将 HEAD 指向的位置改变为之前存在的某个版本。如果想恢复到之前的某个提交版本，且那个版本之后提交我们都不要了，就可以用这种方法<span class="label danger">（慎用）</span></p>
<p>回退到上个 commit 版本<span class="label info">（当前版本的前一个）</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>–hard  还原工作区及其暂存区<span class="label info">（硬重置）</span><br>–mixed 还原暂存区，且把 HEAD 和分支名的引用指向该 commit<span class="label info">（默认选项）</span><br>–soft  工作区及其暂存区保持原样，只是把 HEAD 指向该 commit<span class="label info">（软重置）</span></p>
<p>该方法通常结合 git reflog 使用<span class="label info">（只要 HEAD 发生变化 reflog 都会记录【.git/logs/HEAD】）</span></p>
<h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>revert 用于“反做”某一个版本，以达到撤销该版本的修改的目的。例如：我们 commit 了三个版本，想撤销版本二，但又不想影响到版本三的内容，就可以使用此方法“反做”下版本二，创建个版本四</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert HEAD^</span><br><span class="line">git add .                                                <span class="comment">#有冲突就先解决下再 add，无冲突直接执行下句</span></span><br><span class="line">git revert --<span class="built_in">continue</span>                                    <span class="comment">#纳入版本管理，并编辑 commit 信息</span></span><br></pre></td></tr></table></figure>

<p>git revert SHA-1 === git revert -e SHA-1 默认值 -e<br>git revert -n [START_SHA-1] [END_SHA-1] 撤销多个版本<br>git revert –abort 取消</p>
<h2 id="提交项目"><a href="#提交项目" class="headerlink" title="提交项目"></a>提交项目</h2><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push                                                 <span class="comment">#推送已同步的所有分支</span></span><br><span class="line">git push -u [<span class="string">&quot;origin&quot;</span>] [<span class="string">&quot;branch&quot;</span>]                        <span class="comment">#初次推送分支</span></span><br><span class="line">git push --set-upstream [<span class="string">&quot;origin&quot;</span>] [<span class="string">&quot;branch&quot;</span>]</span><br><span class="line">git push -f [<span class="string">&quot;origin&quot;</span>] [<span class="string">&quot;branch&quot;</span>]                        <span class="comment">#强制推送分支（慎用）</span></span><br><span class="line">git push --force [<span class="string">&quot;origin&quot;</span>] [<span class="string">&quot;branch&quot;</span>]</span><br><span class="line">git push origin [<span class="string">&quot;tag name&quot;</span>]                             <span class="comment">#推送标签</span></span><br><span class="line">git push origin --tags                                   <span class="comment">#推送所有标签</span></span><br><span class="line">git push origin --delete tag [<span class="string">&quot;tag name&quot;</span>]                <span class="comment">#删除远程标签</span></span><br><span class="line">git push [<span class="string">&quot;origin&quot;</span>] --delete [<span class="string">&quot;branch-name&quot;</span>]             <span class="comment">#删除远程分支</span></span><br></pre></td></tr></table></figure>

<h2 id="更新项目"><a href="#更新项目" class="headerlink" title="更新项目"></a>更新项目</h2><h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git fetch [<span class="string">&quot;remote&quot;</span>] [<span class="string">&quot;branch&quot;</span>]</span><br><span class="line">- git diff origin/master</span><br><span class="line">- git diff master origin/master</span><br><span class="line">- git merge origin/master</span><br></pre></td></tr></table></figure>

<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br><span class="line">git pull [<span class="string">&quot;remote&quot;</span>] [<span class="string">&quot;branch&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>多人合作时拉取项目时，pull 操作会自动创建一条 commit，人多的话会有很多该信息不利于查看，可使用下述命令解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin master</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">git fetch --all</span><br><span class="line">git rebase [<span class="string">&quot;branch&quot;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>最近升级到了GIT2.25.0版本，并且终端提示信息改成了中文，有点扯的就是 <code>git status</code> 时文件名称乱码了！乱码形式如下：</p>
<div class="note ">
            <p>位于分支 master<br>您的分支领先 ‘origin/master’ 共 2 个提交。<br>  （使用 “git push” 来发布您的本地提交）</p><p>尚未暂存以备提交的变更：<br>  （使用 “git add &lt;文件&gt;…” 更新要提交的内容）<br>  （使用 “git restore &lt;文件&gt;…” 丢弃工作区的改动）<br>  修改：     package.json</p><p>未跟踪的文件:<br>  （使用 “git add &lt;文件&gt;…” 以包含要提交的内容）<br>  <span class="label warning">“source/_posts/github-\346\201\242\345\244\215\345\267\262\345\210\240\351\231\244\347\232\204\344\273\223\345\272\223.md”</span></p><p>修改尚未加入提交（使用 “git add” 和/或 “git commit -a”）</p>
          </div>

<p>解决方案是：<br><a href="https://www.worldhello.net/gotgit/08-git-misc/020-git-charset.html">https://www.worldhello.net/gotgit/08-git-misc/020-git-charset.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Window 用户还需要执行下述命令</span></span><br><span class="line">git config --global i18n.logoutputencoding utf8</span><br><span class="line">git config --global i18n.commitencoding utf8</span><br></pre></td></tr></table></figure>

<p>或者设置环境配置文件切换到英文状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8;</span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8;</span><br></pre></td></tr></table></figure>

<p>其它跟UTF-8字符集有关的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global i18n.commitEncoding utf-8    <span class="comment">#提交 commit 时乱码</span></span><br><span class="line">git config --global i18n.logOutputEncoding utf-8 <span class="comment">#查看 commit 时乱码</span></span><br><span class="line">git config --global gui.encoding utf-8           <span class="comment">#GUI界面乱码</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git commands</tag>
      </tags>
  </entry>
</search>
